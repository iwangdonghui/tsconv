{
  "version": 3,
  "sources": ["../bundle-ZnJwIg/checked-fetch.js", "../bundle-ldGqPE/checked-fetch.js", "../../../functions/api/format/templates.ts", "../../../functions/api/date-diff.ts", "../../../functions/api/format/index.ts", "../../../functions/api/timezones.ts", "../../../functions/api/version.ts", "../../../functions/api/workdays.ts", "../../../api-handlers/redis-client.ts", "../../../api-handlers/cache-utils.ts", "../../../api-handlers/analytics.ts", "../../../api-handlers/security.ts", "../../../api-handlers/analytics-api.ts", "../../../api-handlers/cache-admin.ts", "../../../api-handlers/cache-test.ts", "../../../api-handlers/env-debug.ts", "../../../api-handlers/admin-router.ts", "../../../api-handlers/convert.ts", "../../../api-handlers/health.ts", "../../../api-handlers/now.ts", "../../../api-handlers/v1-router.ts", "../../../api-handlers/date-diff.ts", "../../../api-handlers/format.ts", "../../../api-handlers/timezones-enhanced.ts", "../../../api-handlers/workdays.ts", "../../../functions/api/%5B%5Bpath%5D%5D.ts", "../pages-IqqQDz/functionsRoutes-0.6455209167324804.mjs", "../../../node_modules/path-to-regexp/src/index.ts", "../../../node_modules/wrangler/templates/pages-template-worker.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-ldGqPE/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-ldGqPE/middleware-loader.entry.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-ZnJwIg/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-ZnJwIg/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/donghui/dev/tsconv/.wrangler/tmp/dev-eQBwDY",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "export const onRequestOptions = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n};\n\n// Predefined format templates\nconst FORMAT_TEMPLATES = {\n  iso: 'YYYY-MM-DDTHH:mm:ss.sssZ',\n  'iso-date': 'YYYY-MM-DD',\n  'iso-time': 'HH:mm:ss',\n  'us-date': 'MM/DD/YYYY',\n  'us-datetime': 'MM/DD/YYYY HH:mm:ss',\n  'eu-date': 'DD/MM/YYYY',\n  'eu-datetime': 'DD/MM/YYYY HH:mm:ss',\n  readable: 'MMMM Do, YYYY',\n  'readable-full': 'dddd, MMMM Do, YYYY [at] h:mm A',\n  compact: 'YYYYMMDD',\n  'compact-time': 'YYYYMMDDHHmmss',\n  unix: 'X',\n  'unix-ms': 'x',\n  rfc2822: 'ddd, DD MMM YYYY HH:mm:ss ZZ',\n\n  // Enhanced SQL formats for different databases and use cases\n  sql: 'YYYY-MM-DD HH:mm:ss', // Standard SQL DATETIME\n  'sql-date': 'YYYY-MM-DD', // SQL DATE format\n  'sql-time': 'HH:mm:ss', // SQL TIME format\n  'sql-timestamp': 'YYYY-MM-DD HH:mm:ss.SSS', // SQL TIMESTAMP with milliseconds\n  'sql-mysql': 'YYYY-MM-DD HH:mm:ss', // MySQL DATETIME format\n  'sql-postgresql': 'YYYY-MM-DD HH:mm:ss.SSS', // PostgreSQL TIMESTAMP format\n  'sql-sqlserver': 'YYYY-MM-DD HH:mm:ss.SSS', // SQL Server DATETIME2 format\n  'sql-oracle': 'DD-MMM-YYYY HH:mm:ss', // Oracle DATE format\n  'sql-sqlite': 'YYYY-MM-DD HH:mm:ss', // SQLite DATETIME format\n  'sql-iso': 'YYYY-MM-DDTHH:mm:ss', // SQL ISO format (without timezone)\n  'sql-utc': 'YYYY-MM-DD HH:mm:ss [UTC]', // SQL with UTC indicator\n\n  filename: 'YYYY-MM-DD_HH-mm-ss',\n  log: 'YYYY-MM-DD HH:mm:ss.SSS',\n} as const;\n\nexport const onRequestGet = async () => {\n  const body = {\n    success: true,\n    data: { templates: FORMAT_TEMPLATES },\n    metadata: { timestamp: new Date().toISOString(), cached: false },\n  };\n  return new Response(JSON.stringify(body), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n    },\n  });\n};\n", "function calculateDateDifference(start: Date, end: Date, absolute = false) {\n  let s = new Date(start),\n    e = new Date(end);\n  if (absolute && s > e) [s, e] = [e, s];\n  const diffMs = e.getTime() - s.getTime();\n  const isNeg = diffMs < 0;\n  const absMs = Math.abs(diffMs);\n  const seconds = Math.floor(absMs / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n  const weeks = Math.floor(days / 7);\n  const months = Math.floor(days / 30.44);\n  const years = Math.floor(days / 365.25);\n  const parts: string[] = [];\n  if (years > 0) parts.push(`${years} year${years !== 1 ? 's' : ''}`);\n  if (months % 12 > 0) parts.push(`${months % 12} month${months % 12 !== 1 ? 's' : ''}`);\n  if (days % 30 > 0)\n    parts.push(`${Math.floor(days % 30)} day${Math.floor(days % 30) !== 1 ? 's' : ''}`);\n  if (hours % 24 > 0) parts.push(`${hours % 24} hour${hours % 24 !== 1 ? 's' : ''}`);\n  if (minutes % 60 > 0) parts.push(`${minutes % 60} minute${minutes % 60 !== 1 ? 's' : ''}`);\n  let humanReadable = parts.length > 0 ? parts.join(', ') : '0 seconds';\n  if (isNeg && !absolute) humanReadable = `${humanReadable} ago`;\n  return {\n    milliseconds: absolute ? absMs : diffMs,\n    seconds: absolute ? seconds : isNeg ? -seconds : seconds,\n    minutes: absolute ? minutes : isNeg ? -minutes : minutes,\n    hours: absolute ? hours : isNeg ? -hours : hours,\n    days: absolute ? days : isNeg ? -days : days,\n    weeks: absolute ? weeks : isNeg ? -weeks : weeks,\n    months: absolute ? months : isNeg ? -months : months,\n    years: absolute ? years : isNeg ? -years : years,\n    humanReadable,\n    isNegative: !absolute && isNeg,\n    direction: isNeg ? 'past' : 'future',\n  };\n}\n\nfunction formatNumber(num: number) {\n  return new Intl.NumberFormat().format(Math.abs(num));\n}\n\nexport const onRequestOptions = async () =>\n  new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n\nexport const onRequestGet = async ({ request }: { request: Request }) => {\n  const url = new URL(request.url);\n  const startDate = url.searchParams.get('startDate');\n  const endDate = url.searchParams.get('endDate');\n  const startTime = url.searchParams.get('startTime');\n  const endTime = url.searchParams.get('endTime');\n  const includeTime = url.searchParams.get('includeTime') === 'true';\n  const absolute = url.searchParams.get('absolute') === 'true';\n\n  if (!startDate || !endDate)\n    return new Response(\n      JSON.stringify({ success: false, error: 'Both start date and end date are required' }),\n      {\n        status: 400,\n        headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n      }\n    );\n\n  let start: Date, end: Date;\n  if (includeTime && startTime && endTime) {\n    start = new Date(`${startDate}T${startTime}`);\n    end = new Date(`${endDate}T${endTime}`);\n  } else {\n    start = new Date(startDate);\n    end = new Date(endDate);\n  }\n\n  if (Number.isNaN(start.getTime()) || Number.isNaN(end.getTime()))\n    return new Response(JSON.stringify({ success: false, error: 'Invalid date format' }), {\n      status: 400,\n      headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n    });\n\n  const difference = calculateDateDifference(start, end, absolute);\n  const result = {\n    startDate: start.toISOString(),\n    endDate: end.toISOString(),\n    includeTime,\n    absolute,\n    difference,\n    formatted: {\n      years: formatNumber(difference.years),\n      months: formatNumber(difference.months),\n      weeks: formatNumber(difference.weeks),\n      days: formatNumber(difference.days),\n      hours: formatNumber(difference.hours),\n      minutes: formatNumber(difference.minutes),\n      seconds: formatNumber(difference.seconds),\n    },\n  };\n\n  return new Response(\n    JSON.stringify({\n      success: true,\n      data: result,\n      metadata: { timestamp: new Date().toISOString(), cached: false },\n    }),\n    {\n      status: 200,\n      headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n    }\n  );\n};\n", "function getOrdinalSuffix(day: number): string {\n  if (day >= 11 && day <= 13) return 'th';\n  switch (day % 10) {\n    case 1:\n      return 'st';\n    case 2:\n      return 'nd';\n    case 3:\n      return 'rd';\n    default:\n      return 'th';\n  }\n}\n\nconst monthNames = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nconst monthNamesShort = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec',\n];\n\nconst dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nconst dayNamesShort = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\nfunction formatDate(date: Date, format: string): string {\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  const hours = date.getHours();\n  const minutes = date.getMinutes();\n  const seconds = date.getSeconds();\n  const milliseconds = date.getMilliseconds();\n\n  if (format === 'X') return Math.floor(date.getTime() / 1000).toString();\n  if (format === 'x') return date.getTime().toString();\n\n  let result = format\n    .replace(/YYYY/g, year.toString())\n    .replace(/YY/g, year.toString().slice(-2))\n    .replace(/MMMM/g, monthNames[month - 1] || '')\n    .replace(/MMM/g, monthNamesShort[month - 1] || '')\n    .replace(/MM/g, month.toString().padStart(2, '0'))\n    .replace(/\\bM\\b/g, month.toString())\n    .replace(/dddd/g, dayNames[date.getDay()] || '')\n    .replace(/ddd/g, dayNamesShort[date.getDay()] || '')\n    .replace(/Do/g, day.toString() + getOrdinalSuffix(day))\n    .replace(/DD/g, day.toString().padStart(2, '0'))\n    .replace(/\\bD\\b/g, day.toString())\n    .replace(/HH/g, hours.toString().padStart(2, '0'))\n    .replace(/hh/g, (hours % 12 || 12).toString().padStart(2, '0'))\n    .replace(/\\bH\\b/g, hours.toString())\n    .replace(/\\bh\\b/g, (hours % 12 || 12).toString())\n    .replace(/mm/g, minutes.toString().padStart(2, '0'))\n    .replace(/\\bm\\b/g, minutes.toString())\n    .replace(/ss/g, seconds.toString().padStart(2, '0'))\n    .replace(/\\bs\\b/g, seconds.toString())\n    .replace(/SSS/g, milliseconds.toString().padStart(3, '0'))\n    .replace(\n      /SS/g,\n      Math.floor(milliseconds / 10)\n        .toString()\n        .padStart(2, '0')\n    )\n    .replace(/S/g, Math.floor(milliseconds / 100).toString())\n    .replace(/A/g, hours >= 12 ? 'PM' : 'AM')\n    .replace(/a/g, hours >= 12 ? 'pm' : 'am')\n    .replace(/ZZ/g, '+0000')\n    .replace(/Z/g, '+00:00');\n\n  result = result.replace(/\\[([^\\]]+)\\]/g, '$1');\n  return result;\n}\n\nconst FORMAT_TEMPLATES = {\n  iso: 'YYYY-MM-DDTHH:mm:ss.sssZ',\n  'iso-date': 'YYYY-MM-DD',\n  'iso-time': 'HH:mm:ss',\n  'us-date': 'MM/DD/YYYY',\n  'us-datetime': 'MM/DD/YYYY HH:mm:ss',\n  'eu-date': 'DD/MM/YYYY',\n  'eu-datetime': 'DD/MM/YYYY HH:mm:ss',\n  readable: 'MMMM Do, YYYY',\n  'readable-full': 'dddd, MMMM Do, YYYY [at] h:mm A',\n  compact: 'YYYYMMDD',\n  'compact-time': 'YYYYMMDDHHmmss',\n  unix: 'X',\n  'unix-ms': 'x',\n  rfc2822: 'ddd, DD MMM YYYY HH:mm:ss ZZ',\n  sql: 'YYYY-MM-DD HH:mm:ss',\n  'sql-date': 'YYYY-MM-DD',\n  'sql-time': 'HH:mm:ss',\n  'sql-timestamp': 'YYYY-MM-DD HH:mm:ss.SSS',\n  'sql-mysql': 'YYYY-MM-DD HH:mm:ss',\n  'sql-postgresql': 'YYYY-MM-DD HH:mm:ss.SSS',\n  'sql-sqlserver': 'YYYY-MM-DD HH:mm:ss.SSS',\n  'sql-oracle': 'DD-MMM-YYYY HH:mm:ss',\n  'sql-sqlite': 'YYYY-MM-DD HH:mm:ss',\n  'sql-iso': 'YYYY-MM-DDTHH:mm:ss',\n  'sql-utc': 'YYYY-MM-DD HH:mm:ss [UTC]',\n  filename: 'YYYY-MM-DD_HH-mm-ss',\n  log: 'YYYY-MM-DD HH:mm:ss.SSS',\n} as const;\n\nexport const onRequestOptions = async () =>\n  new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n\nexport const onRequestGet = async (ctx: { request: Request }) => {\n  const url = new URL(ctx.request.url);\n  if (url.pathname.endsWith('/templates')) {\n    const body = {\n      success: true,\n      data: { templates: FORMAT_TEMPLATES },\n      metadata: { timestamp: new Date().toISOString(), cached: false },\n    };\n    return new Response(JSON.stringify(body), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n    });\n  }\n\n  const ts = url.searchParams.get('timestamp');\n  const date = url.searchParams.get('date');\n  const format = url.searchParams.get('format');\n\n  if (!format) {\n    return new Response(JSON.stringify({ success: false, error: 'Format parameter is required' }), {\n      status: 400,\n      headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n    });\n  }\n\n  let targetDate: Date;\n  if (ts) {\n    const parsed = parseInt(ts);\n    if (Number.isNaN(parsed)) {\n      return new Response(JSON.stringify({ success: false, error: 'Invalid timestamp format' }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n      });\n    }\n    targetDate = new Date(parsed * 1000);\n  } else if (date) {\n    const d = new Date(date);\n    if (Number.isNaN(d.getTime())) {\n      return new Response(JSON.stringify({ success: false, error: 'Invalid date format' }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n      });\n    }\n    targetDate = d;\n  } else {\n    targetDate = new Date();\n  }\n\n  const formatPattern = (FORMAT_TEMPLATES as any)[format] || format;\n  const formatted = formatDate(targetDate, formatPattern);\n\n  return new Response(\n    JSON.stringify({\n      success: true,\n      data: { input: { ts, date, format }, output: { formatted, timezone: 'UTC' } },\n      metadata: { timestamp: new Date().toISOString(), cached: false },\n    }),\n    {\n      status: 200,\n      headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n    }\n  );\n};\n", "interface Timezone {\n  id: string;\n  name: string;\n  region: string;\n  country: string;\n  offset: string;\n  offsetMinutes: number;\n  currentTime: string;\n  isDST: boolean;\n  abbreviation: string;\n}\n\nconst TIMEZONE_DATA: Timezone[] = [\n  {\n    id: 'America/New_York',\n    name: 'Eastern Time',\n    region: 'America',\n    country: 'United States',\n    offset: 'UTC-5',\n    offsetMinutes: -300,\n    currentTime: '',\n    isDST: false,\n    abbreviation: 'EST',\n  },\n  {\n    id: 'America/Los_Angeles',\n    name: 'Pacific Time',\n    region: 'America',\n    country: 'United States',\n    offset: 'UTC-8',\n    offsetMinutes: -480,\n    currentTime: '',\n    isDST: false,\n    abbreviation: 'PST',\n  },\n  {\n    id: 'Europe/London',\n    name: 'Greenwich Mean Time',\n    region: 'Europe',\n    country: 'United Kingdom',\n    offset: 'UTC+0',\n    offsetMinutes: 0,\n    currentTime: '',\n    isDST: false,\n    abbreviation: 'GMT',\n  },\n  {\n    id: 'Europe/Paris',\n    name: 'Central European Time',\n    region: 'Europe',\n    country: 'France',\n    offset: 'UTC+1',\n    offsetMinutes: 60,\n    currentTime: '',\n    isDST: false,\n    abbreviation: 'CET',\n  },\n  {\n    id: 'Asia/Tokyo',\n    name: 'Japan Standard Time',\n    region: 'Asia',\n    country: 'Japan',\n    offset: 'UTC+9',\n    offsetMinutes: 540,\n    currentTime: '',\n    isDST: false,\n    abbreviation: 'JST',\n  },\n  {\n    id: 'Asia/Shanghai',\n    name: 'China Standard Time',\n    region: 'Asia',\n    country: 'China',\n    offset: 'UTC+8',\n    offsetMinutes: 480,\n    currentTime: '',\n    isDST: false,\n    abbreviation: 'CST',\n  },\n  {\n    id: 'Australia/Sydney',\n    name: 'Australian Eastern Time',\n    region: 'Australia',\n    country: 'Australia',\n    offset: 'UTC+10',\n    offsetMinutes: 600,\n    currentTime: '',\n    isDST: false,\n    abbreviation: 'AEST',\n  },\n  {\n    id: 'America/Chicago',\n    name: 'Central Time',\n    region: 'America',\n    country: 'United States',\n    offset: 'UTC-6',\n    offsetMinutes: -360,\n    currentTime: '',\n    isDST: false,\n    abbreviation: 'CST',\n  },\n  {\n    id: 'Europe/Berlin',\n    name: 'Central European Time',\n    region: 'Europe',\n    country: 'Germany',\n    offset: 'UTC+1',\n    offsetMinutes: 60,\n    currentTime: '',\n    isDST: false,\n    abbreviation: 'CET',\n  },\n  {\n    id: 'Asia/Dubai',\n    name: 'Gulf Standard Time',\n    region: 'Asia',\n    country: 'United Arab Emirates',\n    offset: 'UTC+4',\n    offsetMinutes: 240,\n    currentTime: '',\n    isDST: false,\n    abbreviation: 'GST',\n  },\n];\n\nfunction calculateCurrentTime(offsetMinutes: number): string {\n  const now = new Date();\n  const utc = now.getTime() + now.getTimezoneOffset() * 60000;\n  const targetTime = new Date(utc + offsetMinutes * 60000);\n  return targetTime.toISOString();\n}\n\nfunction filterTimezones(timezones: Timezone[], filters: any): Timezone[] {\n  let filtered = [...timezones];\n  if (filters.q) {\n    const q = filters.q.toLowerCase();\n    filtered = filtered.filter(\n      tz =>\n        tz.name.toLowerCase().includes(q) ||\n        tz.country.toLowerCase().includes(q) ||\n        tz.region.toLowerCase().includes(q) ||\n        tz.id.toLowerCase().includes(q)\n    );\n  }\n  if (filters.region) filtered = filtered.filter(tz => tz.region === filters.region);\n  if (filters.country) filtered = filtered.filter(tz => tz.country === filters.country);\n  if (filters.offset) filtered = filtered.filter(tz => tz.offset === filters.offset);\n  return filtered;\n}\n\nexport const onRequestOptions = async () =>\n  new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n\nexport const onRequestGet = async ({ request }: { request: Request }) => {\n  const url = new URL(request.url);\n  const q = url.searchParams.get('q') || undefined;\n  const region = url.searchParams.get('region') || undefined;\n  const country = url.searchParams.get('country') || undefined;\n  const offset = url.searchParams.get('offset') || undefined;\n  const limit = parseInt(url.searchParams.get('limit') || '50');\n\n  const withTime = TIMEZONE_DATA.map(tz => ({\n    ...tz,\n    currentTime: calculateCurrentTime(tz.offsetMinutes),\n  }));\n  const filtered = filterTimezones(withTime, { q, region, country, offset });\n  const limited = filtered.slice(0, limit);\n\n  const regions = [...new Set(TIMEZONE_DATA.map(tz => tz.region))].sort();\n  let availableCountries = TIMEZONE_DATA;\n  if (region) availableCountries = TIMEZONE_DATA.filter(tz => tz.region === region);\n  const countries = [...new Set(availableCountries.map(tz => tz.country))].sort();\n\n  let availableOffsets = TIMEZONE_DATA;\n  if (region) availableOffsets = availableOffsets.filter(tz => tz.region === region);\n  if (country) availableOffsets = availableOffsets.filter(tz => tz.country === country);\n  const offsets = [...new Set(availableOffsets.map(tz => tz.offset))].sort();\n\n  const body = {\n    success: true,\n    data: {\n      timezones: limited,\n      total: filtered.length,\n      showing: limited.length,\n      filters: { regions, countries, offsets },\n      appliedFilters: {\n        q: q || null,\n        region: region || null,\n        country: country || null,\n        offset: offset || null,\n        limit,\n        format: 'detailed',\n      },\n    },\n    metadata: { timestamp: new Date().toISOString(), cached: false },\n  };\n\n  return new Response(JSON.stringify(body), {\n    status: 200,\n    headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n  });\n};\n", "export const onRequestGet = async () => {\n  const body = {\n    success: true,\n    data: {\n      version: process.env.GIT_COMMIT_SHA || 'unknown',\n      buildTime: new Date().toISOString(),\n      runtime: 'cloudflare-pages-functions',\n    },\n  };\n  return new Response(JSON.stringify(body), { status: 200, headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' } });\n};\n", "interface Holiday {\n  date: string;\n  name: string;\n  type: string;\n}\n\nconst HOLIDAYS: Record<string, Holiday[]> = {\n  US: [\n    { date: '2024-01-01', name: \"New Year's Day\", type: 'federal' },\n    { date: '2024-07-04', name: 'Independence Day', type: 'federal' },\n    { date: '2024-12-25', name: 'Christmas Day', type: 'federal' },\n  ],\n  UK: [\n    { date: '2024-01-01', name: \"New Year's Day\", type: 'bank' },\n    { date: '2024-12-25', name: 'Christmas Day', type: 'bank' },\n    { date: '2024-12-26', name: 'Boxing Day', type: 'bank' },\n  ],\n  CN: [\n    { date: '2024-01-01', name: \"New Year's Day\", type: 'national' },\n    { date: '2024-02-10', name: 'Spring Festival', type: 'national' },\n    { date: '2024-10-01', name: 'National Day', type: 'national' },\n  ],\n};\n\nfunction isWeekend(date: Date): boolean {\n  const d = date.getDay();\n  return d === 0 || d === 6;\n}\nfunction isHoliday(date: Date, country: string): Holiday | null {\n  const s = date.toISOString().split('T')[0];\n  return (HOLIDAYS[country] || []).find(h => h.date === s) || null;\n}\n\nfunction addBusinessDays(\n  startDate: Date,\n  days: number,\n  excludeWeekends: boolean,\n  excludeHolidays: boolean,\n  country: string\n): Date {\n  const currentDate = new Date(startDate);\n  let added = 0;\n  while (added < days) {\n    currentDate.setDate(currentDate.getDate() + 1);\n    let count = true;\n    if (excludeWeekends && isWeekend(currentDate)) count = false;\n    if (excludeHolidays && isHoliday(currentDate, country)) count = false;\n    if (count) added++;\n  }\n  return currentDate;\n}\n\nfunction calculateWorkdays(\n  startDate: Date,\n  endDate: Date,\n  excludeWeekends: boolean,\n  excludeHolidays: boolean,\n  country: string\n) {\n  let workdays = 0,\n    totalDays = 0,\n    weekends = 0,\n    holidays = 0;\n  const excluded: Array<{ date: string; reason: string; name?: string }> = [];\n  const cur = new Date(startDate);\n  while (cur <= endDate) {\n    totalDays++;\n    let excludedFlag = false;\n    let reason = '';\n    let holidayName = '';\n    if (excludeWeekends && isWeekend(cur)) {\n      weekends++;\n      excludedFlag = true;\n      reason = 'Weekend';\n    }\n    const h = excludeHolidays ? isHoliday(cur, country) : null;\n    if (h) {\n      holidays++;\n      excludedFlag = true;\n      reason = reason ? `${reason}, Holiday` : 'Holiday';\n      holidayName = h.name;\n    }\n    if (excludedFlag) {\n      excluded.push({\n        date: cur.toISOString().split('T')[0] ?? '',\n        reason,\n        ...(holidayName ? { name: holidayName } : {}),\n      });\n    } else {\n      workdays++;\n    }\n    cur.setDate(cur.getDate() + 1);\n  }\n  return { workdays, totalDays, weekends, holidays, excludedDates: excluded };\n}\n\nexport const onRequestOptions = async () =>\n  new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n\nexport const onRequestGet = async ({ request }: { request: Request }) => {\n  const url = new URL(request.url);\n  const startDate = url.searchParams.get('startDate');\n  const endDate = url.searchParams.get('endDate');\n  const days = url.searchParams.get('days');\n  const excludeWeekends = url.searchParams.get('excludeWeekends') ?? 'true';\n  const excludeHolidays = url.searchParams.get('excludeHolidays') ?? 'false';\n  const country = url.searchParams.get('country') ?? 'US';\n  const mode = url.searchParams.get('mode') ?? 'dateRange';\n\n  if (!startDate)\n    return new Response(JSON.stringify({ success: false, error: 'Start date is required' }), {\n      status: 400,\n      headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n    });\n\n  const start = new Date(startDate);\n  const excludeW = excludeWeekends === 'true';\n  const excludeH = excludeHolidays === 'true';\n\n  let result: any;\n  if (mode === 'dayCount') {\n    if (!days)\n      return new Response(\n        JSON.stringify({ success: false, error: 'Days parameter is required for dayCount mode' }),\n        {\n          status: 400,\n          headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n        }\n      );\n    const target = addBusinessDays(start, parseInt(days), excludeW, excludeH, country);\n    result = {\n      mode: 'dayCount',\n      startDate: start.toISOString().split('T')[0],\n      targetDate: target.toISOString().split('T')[0],\n      requestedDays: parseInt(days),\n      settings: { excludeWeekends: excludeW, excludeHolidays: excludeH, country },\n    };\n  } else {\n    if (!endDate)\n      return new Response(\n        JSON.stringify({ success: false, error: 'End date is required for dateRange mode' }),\n        {\n          status: 400,\n          headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n        }\n      );\n    const end = new Date(endDate);\n    const calc = calculateWorkdays(start, end, excludeW, excludeH, country);\n    result = {\n      mode: 'dateRange',\n      startDate: start.toISOString().split('T')[0],\n      endDate: end.toISOString().split('T')[0],\n      ...calc,\n      settings: { excludeWeekends: excludeW, excludeHolidays: excludeH, country },\n    };\n  }\n\n  return new Response(\n    JSON.stringify({\n      success: true,\n      data: result,\n      metadata: { timestamp: new Date().toISOString(), cached: false },\n    }),\n    {\n      status: 200,\n      headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n    }\n  );\n};\n", "// Redis client adapter for Cloudflare Workers/Pages\n// Supports both Upstash Redis and fallback to memory cache\n\ninterface _RedisResponse {\n  result?: any;\n  error?: string;\n}\n\ninterface CacheEntry {\n  value: any;\n  expiry: number;\n}\n\nclass MemoryCache {\n  private cache = new Map<string, CacheEntry>();\n  private maxSize = 1000; // Limit memory usage\n\n  set(key: string, value: any, ttlSeconds: number = 3600): boolean {\n    // Clean expired entries if cache is getting full\n    if (this.cache.size >= this.maxSize) {\n      this.cleanup();\n    }\n\n    const expiry = Date.now() + ttlSeconds * 1000;\n    this.cache.set(key, { value, expiry });\n    return true;\n  }\n\n  get(key: string): any | null {\n    const entry = this.cache.get(key);\n    if (!entry) return null;\n\n    if (Date.now() > entry.expiry) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    return entry.value;\n  }\n\n  del(key: string): boolean {\n    return this.cache.delete(key);\n  }\n\n  exists(key: string): boolean {\n    const entry = this.cache.get(key);\n    if (!entry) return false;\n\n    if (Date.now() > entry.expiry) {\n      this.cache.delete(key);\n      return false;\n    }\n\n    return true;\n  }\n\n  private cleanup(): void {\n    const now = Date.now();\n    for (const [key, entry] of this.cache.entries()) {\n      if (now > entry.expiry) {\n        this.cache.delete(key);\n      }\n    }\n\n    // If still too large, remove oldest entries\n    if (this.cache.size >= this.maxSize) {\n      const entries = Array.from(this.cache.entries());\n      const toRemove = entries.slice(0, Math.floor(this.maxSize * 0.2));\n      toRemove.forEach(([key]) => this.cache.delete(key));\n    }\n  }\n\n  size(): number {\n    this.cleanup();\n    return this.cache.size;\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n}\n\nexport class RedisClient {\n  private redisUrl: string | null;\n  private redisToken: string | null;\n  private enabled: boolean;\n  private memoryCache: MemoryCache;\n\n  constructor(env: any) {\n    this.redisUrl = env.UPSTASH_REDIS_REST_URL || null;\n    this.redisToken = env.UPSTASH_REDIS_REST_TOKEN || null;\n    this.enabled = !!(this.redisUrl && this.redisToken && env.REDIS_ENABLED !== 'false');\n    this.memoryCache = new MemoryCache();\n  }\n\n  private async makeRedisRequest(command: string[]): Promise<RedisResponse> {\n    if (!this.enabled || !this.redisUrl || !this.redisToken) {\n      throw new Error('Redis not configured');\n    }\n\n    try {\n      const response = await fetch(this.redisUrl, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${this.redisToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(command),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Redis request failed: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Redis request error:', error);\n      throw error;\n    }\n  }\n\n  async set(key: string, value: any, ttlSeconds: number = 3600): Promise<boolean> {\n    try {\n      if (this.enabled) {\n        const serialized = JSON.stringify(value);\n        const result = await this.makeRedisRequest([\n          'SETEX',\n          key,\n          ttlSeconds.toString(),\n          serialized,\n        ]);\n        return result.result === 'OK';\n      } else {\n        // Fallback to memory cache\n        return this.memoryCache.set(key, value, ttlSeconds);\n      }\n    } catch (error) {\n      console.warn('Redis SET failed, using memory cache:', error);\n      return this.memoryCache.set(key, value, ttlSeconds);\n    }\n  }\n\n  async get(key: string): Promise<any | null> {\n    try {\n      if (this.enabled) {\n        const result = await this.makeRedisRequest(['GET', key]);\n        if (result.result === null) return null;\n        return JSON.parse(result.result);\n      } else {\n        // Fallback to memory cache\n        return this.memoryCache.get(key);\n      }\n    } catch (error) {\n      console.warn('Redis GET failed, using memory cache:', error);\n      return this.memoryCache.get(key);\n    }\n  }\n\n  async del(key: string): Promise<boolean> {\n    try {\n      if (this.enabled) {\n        const result = await this.makeRedisRequest(['DEL', key]);\n        return result.result > 0;\n      } else {\n        // Fallback to memory cache\n        return this.memoryCache.del(key);\n      }\n    } catch (error) {\n      console.warn('Redis DEL failed, using memory cache:', error);\n      return this.memoryCache.del(key);\n    }\n  }\n\n  async exists(key: string): Promise<boolean> {\n    try {\n      if (this.enabled) {\n        const result = await this.makeRedisRequest(['EXISTS', key]);\n        return result.result > 0;\n      } else {\n        // Fallback to memory cache\n        return this.memoryCache.exists(key);\n      }\n    } catch (error) {\n      console.warn('Redis EXISTS failed, using memory cache:', error);\n      return this.memoryCache.exists(key);\n    }\n  }\n\n  async ping(): Promise<boolean> {\n    try {\n      if (this.enabled) {\n        const result = await this.makeRedisRequest(['PING']);\n        return result.result === 'PONG';\n      } else {\n        return true; // Memory cache is always \"available\"\n      }\n    } catch (error) {\n      console.warn('Redis PING failed:', error);\n      return false;\n    }\n  }\n\n  async incr(key: string): Promise<number> {\n    try {\n      if (this.enabled) {\n        const result = await this.makeRedisRequest(['INCR', key]);\n        return result.result;\n      } else {\n        // Simple increment for memory cache\n        const current = this.memoryCache.get(key) || 0;\n        const newValue = current + 1;\n        this.memoryCache.set(key, newValue, 3600);\n        return newValue;\n      }\n    } catch (error) {\n      console.warn('Redis INCR failed, using memory cache:', error);\n      const current = this.memoryCache.get(key) || 0;\n      const newValue = current + 1;\n      this.memoryCache.set(key, newValue, 3600);\n      return newValue;\n    }\n  }\n\n  async expire(key: string, ttlSeconds: number): Promise<boolean> {\n    try {\n      if (this.enabled) {\n        const result = await this.makeRedisRequest(['EXPIRE', key, ttlSeconds.toString()]);\n        return result.result === 1;\n      } else {\n        // For memory cache, we need to get and re-set with new TTL\n        const value = this.memoryCache.get(key);\n        if (value !== null) {\n          return this.memoryCache.set(key, value, ttlSeconds);\n        }\n        return false;\n      }\n    } catch (error) {\n      console.warn('Redis EXPIRE failed:', error);\n      return false;\n    }\n  }\n\n  isEnabled(): boolean {\n    return this.enabled;\n  }\n\n  getStats(): { enabled: boolean; type: string; size?: number } {\n    return {\n      enabled: this.enabled,\n      type: this.enabled ? 'redis' : 'memory',\n      size: this.enabled ? undefined : this.memoryCache.size(),\n    };\n  }\n}\n", "// Cache utilities and strategies for API responses\n\nimport { RedisClient } from './redis-client';\n\nexport interface CacheConfig {\n  ttl: number; // Time to live in seconds\n  keyPrefix: string;\n  enabled: boolean;\n}\n\nexport interface CacheStats {\n  hits: number;\n  misses: number;\n  hitRate: number;\n  totalRequests: number;\n}\n\n// Cache configurations for different types of data\nexport const CACHE_CONFIGS = {\n  // API responses\n  CONVERT_API: {\n    ttl: 3600, // 1 hour\n    keyPrefix: 'api:convert:',\n    enabled: true,\n  },\n  NOW_API: {\n    ttl: 60, // 1 minute (current time changes frequently)\n    keyPrefix: 'api:now:',\n    enabled: true,\n  },\n  HEALTH_API: {\n    ttl: 300, // 5 minutes\n    keyPrefix: 'api:health:',\n    enabled: true,\n  },\n\n  // Static data\n  TIMEZONES: {\n    ttl: 86400, // 24 hours\n    keyPrefix: 'data:timezones:',\n    enabled: true,\n  },\n  FORMATS: {\n    ttl: 86400, // 24 hours\n    keyPrefix: 'data:formats:',\n    enabled: true,\n  },\n\n  // User data\n  USER_PREFERENCES: {\n    ttl: 7200, // 2 hours\n    keyPrefix: 'user:prefs:',\n    enabled: true,\n  },\n\n  // Analytics\n  STATS: {\n    ttl: 1800, // 30 minutes\n    keyPrefix: 'stats:',\n    enabled: true,\n  },\n} as const;\n\nexport class CacheManager {\n  private redis: RedisClient;\n  private stats: Map<string, CacheStats>;\n\n  constructor(_env: any) {\n    this.redis = new RedisClient(_env);\n    this.stats = new Map();\n  }\n\n  // Generate cache key with proper prefix and normalization\n  private generateKey(config: CacheConfig, identifier: string): string {\n    // Normalize identifier to ensure consistent keys\n    const normalized = identifier.toLowerCase().replace(/[^a-z0-9]/g, '_');\n    return `${config.keyPrefix}${normalized}`;\n  }\n\n  // Update cache statistics\n  private updateStats(configKey: string, hit: boolean): void {\n    const current = this.stats.get(configKey) || {\n      hits: 0,\n      misses: 0,\n      hitRate: 0,\n      totalRequests: 0,\n    };\n\n    if (hit) {\n      current.hits++;\n    } else {\n      current.misses++;\n    }\n\n    current.totalRequests = current.hits + current.misses;\n    current.hitRate = current.totalRequests > 0 ? (current.hits / current.totalRequests) * 100 : 0;\n\n    this.stats.set(configKey, current);\n  }\n\n  // Get cached data\n  async get<T>(configKey: keyof typeof CACHE_CONFIGS, identifier: string): Promise<T | null> {\n    const config = CACHE_CONFIGS[configKey];\n    if (!config.enabled) return null;\n\n    try {\n      const key = this.generateKey(config, identifier);\n      const cached = await this.redis.get(key);\n\n      const hit = cached !== null;\n      this.updateStats(configKey, hit);\n\n      if (hit) {\n        console.log(`Cache HIT: ${key}`);\n        return cached as T;\n      } else {\n        console.log(`Cache MISS: ${key}`);\n        return null;\n      }\n    } catch (error) {\n      console.error(`Cache GET error for ${configKey}:`, error);\n      this.updateStats(configKey, false);\n      return null;\n    }\n  }\n\n  // Set cached data\n  async set<T>(\n    configKey: keyof typeof CACHE_CONFIGS,\n    identifier: string,\n    data: T\n  ): Promise<boolean> {\n    const config = CACHE_CONFIGS[configKey];\n    if (!config.enabled) return false;\n\n    try {\n      const key = this.generateKey(config, identifier);\n      const success = await this.redis.set(key, data, config._ttl);\n\n      if (success) {\n        console.log(`Cache SET: ${key} (TTL: ${config.ttl}s)`);\n      }\n\n      return success;\n    } catch (error) {\n      console.error(`Cache SET error for ${configKey}:`, error);\n      return false;\n    }\n  }\n\n  // Delete cached data\n  async del(configKey: keyof typeof CACHE_CONFIGS, identifier: string): Promise<boolean> {\n    const config = CACHE_CONFIGS[configKey];\n\n    try {\n      const key = this.generateKey(config, identifier);\n      const success = await this.redis.del(key);\n\n      if (success) {\n        console.log(`Cache DEL: ${key}`);\n      }\n\n      return success;\n    } catch (error) {\n      console.error(`Cache DEL error for ${configKey}:`, error);\n      return false;\n    }\n  }\n\n  // Cache wrapper for API functions\n  async cached<T>(\n    configKey: keyof typeof CACHE_CONFIGS,\n    identifier: string,\n    fetchFunction: () => Promise<T>\n  ): Promise<T> {\n    // Try to get from cache first\n    const cached = await this.get<T>(configKey, identifier);\n    if (cached !== null) {\n      return cached;\n    }\n\n    // If not in cache, fetch data\n    try {\n      const data = await fetchFunction();\n\n      // Cache the result (don't await to avoid blocking response)\n      this.set(configKey, identifier, data).catch(error => {\n        console.error(`Background cache SET failed for ${configKey}:`, error);\n      });\n\n      return data;\n    } catch (error) {\n      console.error(`Fetch function failed for ${configKey}:`, error);\n      throw error;\n    }\n  }\n\n  // Increment counter (useful for rate limiting and analytics)\n  async increment(configKey: keyof typeof CACHE_CONFIGS, identifier: string): Promise<number> {\n    const config = CACHE_CONFIGS[configKey];\n    const key = this.generateKey(config, identifier);\n\n    try {\n      const count = await this.redis.incr(key);\n      // Set expiry if this is a new key\n      if (count === 1) {\n        await this.redis.expire(key, config._ttl);\n      }\n      return count;\n    } catch (error) {\n      console.error(`Cache INCREMENT error for ${configKey}:`, error);\n      return 1; // Fallback value\n    }\n  }\n\n  // Get cache statistics\n  getStats(): Record<string, CacheStats> {\n    const result: Record<string, CacheStats> = {};\n    for (const [key, stats] of this.stats.entries()) {\n      result[key] = { ...stats };\n    }\n    return result;\n  }\n\n  // Get Redis client stats\n  getRedisStats(): { enabled: boolean; type: string; size?: number } {\n    return this.redis.getStats();\n  }\n\n  // Health check\n  async healthCheck(): Promise<{ status: string; redis: boolean; stats: any }> {\n    try {\n      const redisPing = await this.redis.ping();\n      const redisStats = this.redis.getStats();\n      const cacheStats = this.getStats();\n\n      return {\n        status: redisPing ? 'healthy' : 'degraded',\n        redis: redisPing,\n        stats: {\n          redis: redisStats,\n          cache: cacheStats,\n        },\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        redis: false,\n        stats: { error: error instanceof Error ? error.message : 'Unknown error' },\n      };\n    }\n  }\n\n  // Clear all cache (useful for testing)\n  async clearAll(): Promise<void> {\n    console.warn('Clearing all cache statistics');\n    this.stats.clear();\n    // Note: We don't clear Redis here as it might affect other applications\n  }\n}\n", "// API Analytics and Usage Monitoring\n\nimport { CacheManager } from './cache-utils';\n\ninterface Env {\n  UPSTASH_REDIS_REST_URL?: string;\n  UPSTASH_REDIS_REST_TOKEN?: string;\n  REDIS_ENABLED?: string;\n}\n\ninterface AnalyticsEvent {\n  endpoint: string;\n  method: string;\n  status: number;\n  responseTime: number;\n  userAgent?: string;\n  country?: string;\n  timestamp: string;\n  cached?: boolean;\n}\n\ninterface AnalyticsStats {\n  totalRequests: number;\n  uniqueEndpoints: number;\n  averageResponseTime: number;\n  errorRate: number;\n  cacheHitRate: number;\n  topEndpoints: Array<{ endpoint: string; count: number }>;\n  statusCodes: Record<string, number>;\n  countries: Record<string, number>;\n}\n\nexport class AnalyticsManager {\n  private cacheManager: CacheManager;\n\n  constructor(_env: Env) {\n    this.cacheManager = new CacheManager(_env);\n  }\n\n  // Record an API request event\n  async recordEvent(event: AnalyticsEvent): Promise<void> {\n    try {\n      const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD\n      const hour = new Date().getHours();\n\n      // Store daily stats\n      await this.incrementCounter(`analytics:daily:${today}:requests`);\n      await this.incrementCounter(`analytics:daily:${today}:endpoint:${event.endpoint}`);\n      await this.incrementCounter(`analytics:daily:${today}:status:${event.status}`);\n\n      // Store hourly stats for more granular analysis\n      await this.incrementCounter(`analytics:hourly:${today}:${hour}:requests`);\n\n      // Track response times (store in buckets)\n      const responseTimeBucket = this.getResponseTimeBucket(event.responseTime);\n      await this.incrementCounter(`analytics:daily:${today}:response_time:${responseTimeBucket}`);\n\n      // Track cache hits\n      if (event.cached) {\n        await this.incrementCounter(`analytics:daily:${today}:cache_hits`);\n      }\n\n      // Track countries if available\n      if (event.country) {\n        await this.incrementCounter(`analytics:daily:${today}:country:${event.country}`);\n      }\n\n      // Store recent events for real-time monitoring (keep last 1000)\n      await this.addToRecentEvents(event);\n    } catch (error) {\n      if (process.env.NODE_ENV === 'development')\n        console.error('Failed to record analytics event:', error);\n    }\n  }\n\n  // Get analytics stats for a specific date\n  async getStats(date?: string): Promise<AnalyticsStats> {\n    const targetDate = date || new Date().toISOString().split('T')[0];\n\n    try {\n      // Get basic counters\n      const totalRequests = (await this.getCounter(`analytics:daily:${targetDate}:requests`)) || 0;\n      const cacheHits = (await this.getCounter(`analytics:daily:${targetDate}:cache_hits`)) || 0;\n\n      // Get endpoint stats\n      const endpointStats = await this.getEndpointStats(targetDate);\n\n      // Get status code distribution\n      const statusCodes = await this.getStatusCodeStats(targetDate);\n\n      // Get country distribution\n      const countries = await this.getCountryStats(targetDate);\n\n      // Calculate response time stats\n      const avgResponseTime = await this.getAverageResponseTime(targetDate);\n\n      // Calculate error rate\n      const errorRequests = (statusCodes['4'] || 0) + (statusCodes['5'] || 0);\n      const errorRate = totalRequests > 0 ? (errorRequests / totalRequests) * 100 : 0;\n\n      // Calculate cache hit rate\n      const cacheHitRate = totalRequests > 0 ? (cacheHits / totalRequests) * 100 : 0;\n\n      return {\n        totalRequests,\n        uniqueEndpoints: endpointStats.length,\n        averageResponseTime: avgResponseTime,\n        errorRate,\n        cacheHitRate,\n        topEndpoints: endpointStats.slice(0, 10),\n        statusCodes,\n        countries,\n      };\n    } catch (error) {\n      if (process.env.NODE_ENV === 'development')\n        console.error('Failed to get analytics stats:', error);\n      return this.getEmptyStats();\n    }\n  }\n\n  // Get real-time stats (last hour)\n  async getRealTimeStats(): Promise<any> {\n    const now = new Date();\n    const currentHour = now.getHours();\n    const today = now.toISOString().split('T')[0];\n\n    try {\n      const hourlyRequests =\n        (await this.getCounter(`analytics:hourly:${today}:${currentHour}:requests`)) || 0;\n      const recentEvents = await this.getRecentEvents(100); // Last 100 events\n\n      // Calculate real-time metrics\n      const last5MinEvents = recentEvents.filter(event => {\n        const eventTime = new Date(event.timestamp);\n        return now.getTime() - eventTime.getTime() < 5 * 60 * 1000; // 5 minutes\n      });\n\n      return {\n        currentHourRequests: hourlyRequests,\n        last5MinRequests: last5MinEvents.length,\n        recentEvents: recentEvents.slice(0, 20),\n        timestamp: now.toISOString(),\n      };\n    } catch (error) {\n      if (process.env.NODE_ENV === 'development')\n        console.error('Failed to get real-time stats:', error);\n      return {\n        currentHourRequests: 0,\n        last5MinRequests: 0,\n        recentEvents: [],\n        timestamp: now.toISOString(),\n      };\n    }\n  }\n\n  // Helper methods\n  private async incrementCounter(key: string): Promise<void> {\n    try {\n      await this.cacheManager.increment('STATS', key);\n    } catch (error) {\n      if (process.env.NODE_ENV === 'development')\n        console.error(`Failed to increment counter ${key}:`, error);\n    }\n  }\n\n  private async getCounter(key: string): Promise<number> {\n    try {\n      const value = await this.cacheManager.get('STATS', key);\n      return typeof value === 'number' ? value : 0;\n    } catch (error) {\n      if (process.env.NODE_ENV === 'development')\n        console.error(`Failed to get counter ${key}:`, error);\n      return 0;\n    }\n  }\n\n  private getResponseTimeBucket(responseTime: number): string {\n    if (responseTime < 100) return 'fast';\n    if (responseTime < 500) return 'medium';\n    if (responseTime < 1000) return 'slow';\n    return 'very_slow';\n  }\n\n  private async addToRecentEvents(event: AnalyticsEvent): Promise<void> {\n    try {\n      const recentEvents = await this.getRecentEvents(999);\n      recentEvents.unshift(event);\n      await this.cacheManager.set('STATS', 'recent_events', recentEvents.slice(0, 1000));\n    } catch (error) {\n      if (process.env.NODE_ENV === 'development')\n        console.error('Failed to add recent event:', error);\n    }\n  }\n\n  private async getRecentEvents(limit: number = 100): Promise<AnalyticsEvent[]> {\n    try {\n      const events = await this.cacheManager.get('STATS', 'recent_events');\n      return Array.isArray(events) ? events.slice(0, limit) : [];\n    } catch (error) {\n      console.error('Failed to get recent events:', error);\n      return [];\n    }\n  }\n\n  private async getEndpointStats(\n    _date: string\n  ): Promise<Array<{ endpoint: string; count: number }>> {\n    // This would need to be implemented based on available data\n    // For now, return empty array\n    return [];\n  }\n\n  private async getStatusCodeStats(date: string): Promise<Record<string, number>> {\n    const stats: Record<string, number> = {};\n\n    for (const statusPrefix of ['2', '3', '4', '5']) {\n      const count = await this.getCounter(`analytics:daily:${date}:status:${statusPrefix}xx`);\n      if (count > 0) {\n        stats[statusPrefix] = count;\n      }\n    }\n\n    return stats;\n  }\n\n  private async getCountryStats(_date: string): Promise<Record<string, number>> {\n    // This would need to be implemented based on available data\n    return {};\n  }\n\n  private async getAverageResponseTime(_date: string): Promise<number> {\n    // Calculate weighted average based on response time buckets\n    const fast = (await this.getCounter(`analytics:daily:${date}:response_time:fast`)) || 0;\n    const medium = (await this.getCounter(`analytics:daily:${date}:response_time:medium`)) || 0;\n    const slow = (await this.getCounter(`analytics:daily:${date}:response_time:slow`)) || 0;\n    const verySlow =\n      (await this.getCounter(`analytics:daily:${date}:response_time:very_slow`)) || 0;\n\n    const total = fast + medium + slow + verySlow;\n    if (total === 0) return 0;\n\n    // Use bucket midpoints for calculation\n    const weightedSum = fast * 50 + medium * 300 + slow * 750 + verySlow * 1500;\n    return Math.round(weightedSum / total);\n  }\n\n  private getEmptyStats(): AnalyticsStats {\n    return {\n      totalRequests: 0,\n      uniqueEndpoints: 0,\n      averageResponseTime: 0,\n      errorRate: 0,\n      cacheHitRate: 0,\n      topEndpoints: [],\n      statusCodes: {},\n      countries: {},\n    };\n  }\n}\n", "// Security middleware and utilities\n\nimport { CacheManager } from './cache-utils';\n\ninterface Env {\n  UPSTASH_REDIS_REST_URL?: string;\n  UPSTASH_REDIS_REST_TOKEN?: string;\n  REDIS_ENABLED?: string;\n}\n\ninterface RateLimitConfig {\n  windowMs: number;\n  maxRequests: number;\n  keyGenerator: (request: Request) => string;\n}\n\ninterface SecurityHeaders {\n  'Content-Security-Policy': string;\n  'X-Content-Type-Options': string;\n  'X-Frame-Options': string;\n  'X-XSS-Protection': string;\n  'Referrer-Policy': string;\n  'Permissions-Policy': string;\n  'Strict-Transport-Security': string;\n}\n\nexport class SecurityManager {\n  private cacheManager: CacheManager;\n\n  constructor(_env: Env) {\n    this.cacheManager = new CacheManager(_env);\n  }\n\n  // Rate limiting middleware\n  async checkRateLimit(\n    request: Request,\n    config: RateLimitConfig\n  ): Promise<{ allowed: boolean; remaining: number; resetTime: number }> {\n    try {\n      const key = config.keyGenerator(_request);\n      const now = Date.now();\n      const windowStart = Math.floor(now / config.windowMs) * config.windowMs;\n      const rateLimitKey = `rate_limit:${key}:${windowStart}`;\n\n      // Get current count\n      const currentCount = (await this.cacheManager.get('STATS', rateLimitKey)) || 0;\n\n      if (currentCount >= config.maxRequests) {\n        return {\n          allowed: false,\n          remaining: 0,\n          resetTime: windowStart + config.windowMs,\n        };\n      }\n\n      // Increment counter\n      await this.cacheManager.increment('STATS', rateLimitKey);\n\n      // Set expiry for the key (cleanup)\n      const _ttl = Math.ceil((windowStart + config.windowMs - now) / 1000);\n      // Note: We should set TTL here, but our current cache implementation doesn't support it easily\n\n      return {\n        allowed: true,\n        remaining: config.maxRequests - currentCount - 1,\n        resetTime: windowStart + config.windowMs,\n      };\n    } catch (error) {\n      console.error('Rate limit check failed:', error);\n      // Fail open - allow request if rate limiting fails\n      return {\n        allowed: true,\n        remaining: config.maxRequests - 1,\n        resetTime: Date.now() + config.windowMs,\n      };\n    }\n  }\n\n  // Generate rate limit key based on IP and endpoint\n  generateRateLimitKey(request: Request): string {\n    const url = new URL(request.url);\n    const ip =\n      request.headers.get('CF-Connecting-IP') ||\n      request.headers.get('X-Forwarded-For') ||\n      'unknown';\n    const endpoint = url.pathname;\n    return `${ip}:${endpoint}`;\n  }\n\n  // Check for suspicious activity\n  async checkSuspiciousActivity(\n    request: Request\n  ): Promise<{ suspicious: boolean; reason?: string }> {\n    try {\n      const userAgent = request.headers.get('User-Agent') || '';\n      const ip = request.headers.get('CF-Connecting-IP') || 'unknown';\n\n      // Check for common bot patterns\n      const botPatterns = [\n        /bot/i,\n        /crawler/i,\n        /spider/i,\n        /scraper/i,\n        /curl/i,\n        /wget/i,\n        /python-requests/i,\n      ];\n\n      const isBot = botPatterns.some(pattern => pattern.test(userAgent));\n\n      // Check for suspicious IP patterns (this is basic - in production you'd use threat intelligence)\n      const suspiciousIPs = ['127.0.0.1']; // Add known bad IPs\n      const isSuspiciousIP = suspiciousIPs.includes(ip);\n\n      // Check request frequency from this IP\n      const recentRequestCount = await this.getRecentRequestCount(ip);\n      const isHighFrequency = recentRequestCount > 100; // More than 100 requests in last minute\n\n      if (isBot && isHighFrequency) {\n        return { suspicious: true, reason: 'High frequency bot traffic' };\n      }\n\n      if (isSuspiciousIP) {\n        return { suspicious: true, reason: 'Suspicious IP address' };\n      }\n\n      return { suspicious: false };\n    } catch (error) {\n      console.error('Suspicious activity check failed:', error);\n      return { suspicious: false };\n    }\n  }\n\n  // Get security headers\n  getSecurityHeaders(): SecurityHeaders {\n    return {\n      'Content-Security-Policy':\n        \"default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; frame-ancestors 'none';\",\n      'X-Content-Type-Options': 'nosniff',\n      'X-Frame-Options': 'DENY',\n      'X-XSS-Protection': '1; mode=block',\n      'Referrer-Policy': 'strict-origin-when-cross-origin',\n      'Permissions-Policy': 'camera=(), microphone=(), geolocation=(), payment=()',\n      'Strict-Transport-Security': 'max-age=31536000; includeSubDomains; preload',\n    };\n  }\n\n  // CORS configuration\n  getCORSHeaders(origin?: string): Record<string, string> {\n    const allowedOrigins = [\n      'https://tsconv.com',\n      'https://www.tsconv.com',\n      'http://localhost:3000',\n      'http://localhost:5173',\n    ];\n\n    const isAllowedOrigin = origin && allowedOrigins.includes(origin);\n\n    return {\n      'Access-Control-Allow-Origin': isAllowedOrigin ? origin : 'https://tsconv.com',\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n      'Access-Control-Max-Age': '86400',\n      'Access-Control-Allow-Credentials': 'false',\n    };\n  }\n\n  // Validate request input\n  validateInput(input: any, rules: ValidationRules): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    for (const [field, rule] of Object.entries(rules)) {\n      const value = input[field];\n\n      if (rule.required && (value === undefined || value === null || value === '')) {\n        errors.push(`${field} is required`);\n        continue;\n      }\n\n      if (value !== undefined && value !== null) {\n        if (rule.type && typeof value !== rule.type) {\n          errors.push(`${field} must be of type ${rule.type}`);\n        }\n\n        if (rule.minLength && typeof value === 'string' && value.length < rule.minLength) {\n          errors.push(`${field} must be at least ${rule.minLength} characters`);\n        }\n\n        if (rule.maxLength && typeof value === 'string' && value.length > rule.maxLength) {\n          errors.push(`${field} must be no more than ${rule.maxLength} characters`);\n        }\n\n        if (rule.min && typeof value === 'number' && value < rule.min) {\n          errors.push(`${field} must be at least ${rule.min}`);\n        }\n\n        if (rule.max && typeof value === 'number' && value > rule.max) {\n          errors.push(`${field} must be no more than ${rule.max}`);\n        }\n\n        if (rule.pattern && typeof value === 'string' && !rule.pattern.test(value)) {\n          errors.push(`${field} format is invalid`);\n        }\n      }\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n    };\n  }\n\n  // Log security event\n  async logSecurityEvent(event: SecurityEvent): Promise<void> {\n    try {\n      const securityLog = {\n        ...event,\n        timestamp: new Date().toISOString(),\n      };\n\n      // Store in recent security events\n      const recentEvents = (await this.cacheManager.get('STATS', 'security_events')) || [];\n      recentEvents.unshift(securityLog);\n\n      // Keep only last 1000 events\n      await this.cacheManager.set('STATS', 'security_events', recentEvents.slice(0, 1000));\n\n      // Increment security event counters\n      const today = new Date().toISOString().split('T')[0];\n      await this.cacheManager.increment('STATS', `security:daily:${today}:${event.type}`);\n    } catch (error) {\n      console.error('Failed to log security event:', error);\n    }\n  }\n\n  // Get recent request count for IP\n  private async getRecentRequestCount(ip: string): Promise<number> {\n    try {\n      const now = Date.now();\n      const _oneMinuteAgo = now - 60000; // 1 minute ago\n      const key = `ip_requests:${ip}:${Math.floor(now / 60000)}`; // Per minute bucket\n\n      return (await this.cacheManager.get('STATS', key)) || 0;\n    } catch (error) {\n      console.error('Failed to get recent request count:', error);\n      return 0;\n    }\n  }\n}\n\n// Rate limit configurations for different endpoints\nexport const RATE_LIMITS = {\n  API_GENERAL: {\n    windowMs: 60000, // 1 minute\n    maxRequests: 100, // 100 requests per minute\n    keyGenerator: (request: Request) => {\n      const ip = request.headers.get('CF-Connecting-IP') || 'unknown';\n      return `general:${ip}`;\n    },\n  },\n  API_CONVERT: {\n    windowMs: 60000, // 1 minute\n    maxRequests: 60, // 60 requests per minute\n    keyGenerator: (request: Request) => {\n      const ip = request.headers.get('CF-Connecting-IP') || 'unknown';\n      return `convert:${ip}`;\n    },\n  },\n  API_ADMIN: {\n    windowMs: 60000, // 1 minute\n    maxRequests: 10, // 10 requests per minute\n    keyGenerator: (request: Request) => {\n      const ip = request.headers.get('CF-Connecting-IP') || 'unknown';\n      return `admin:${ip}`;\n    },\n  },\n} as const;\n\n// Validation rules interface\ninterface ValidationRule {\n  required?: boolean;\n  type?: 'string' | 'number' | 'boolean' | 'object';\n  minLength?: number;\n  maxLength?: number;\n  min?: number;\n  max?: number;\n  pattern?: RegExp;\n}\n\ninterface ValidationRules {\n  [field: string]: ValidationRule;\n}\n\n// Security event interface\ninterface SecurityEvent {\n  type: 'rate_limit_exceeded' | 'suspicious_activity' | 'invalid_input' | 'unauthorized_access';\n  ip: string;\n  userAgent?: string;\n  endpoint: string;\n  details?: any;\n}\n", "// Analytics API endpoints for monitoring dashboard\n\nimport { AnalyticsManager } from './analytics';\nimport { SecurityManager } from './security';\n\ninterface Env {\n  UPSTASH_REDIS_REST_URL?: string;\n  UPSTASH_REDIS_REST_TOKEN?: string;\n  REDIS_ENABLED?: string;\n}\n\nexport async function handleAnalytics(\n  request: Request,\n  env: Env,\n  path: string[]\n): Promise<Response> {\n  const securityManager = new SecurityManager(_env);\n  const analyticsManager = new AnalyticsManager(_env);\n\n  // Basic auth check\n  const authHeader = request.headers.get('Authorization');\n  if (\n    !authHeader ||\n    (!authHeader.includes('Bearer debug') && !authHeader.includes('Bearer admin'))\n  ) {\n    return new Response(\n      JSON.stringify({\n        error: 'Unauthorized',\n        message: 'Bearer token required for analytics endpoints',\n      }),\n      {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n\n  // Apply security headers\n  const securityHeaders = securityManager.getSecurityHeaders();\n  const corsHeaders = securityManager.getCORSHeaders(request.headers.get('Origin') || undefined);\n\n  const responseHeaders = {\n    'Content-Type': 'application/json',\n    ...securityHeaders,\n    ...corsHeaders,\n  };\n\n  try {\n    const action = path[0] || 'stats';\n\n    switch (action) {\n      case 'stats':\n        return await handleAnalyticsStats(analyticsManager, _request, responseHeaders);\n\n      case 'realtime':\n        return await handleRealTimeStats(analyticsManager, responseHeaders);\n\n      case 'security':\n        return await handleSecurityStats(securityManager, responseHeaders);\n\n      case 'dashboard':\n        return await handleDashboard(analyticsManager, securityManager, responseHeaders);\n\n      default:\n        return new Response(\n          JSON.stringify({\n            error: 'Not Found',\n            message: `Analytics endpoint '${action}' not found`,\n            availableEndpoints: ['stats', 'realtime', 'security', 'dashboard'],\n          }),\n          {\n            status: 404,\n            headers: responseHeaders,\n          }\n        );\n    }\n  } catch (error) {\n    if (process.env.NODE_ENV === 'development') console.error('Analytics API error:', error);\n\n    return new Response(\n      JSON.stringify({\n        error: 'Internal Server Error',\n        message: error instanceof Error ? error.message : 'Unknown error',\n      }),\n      {\n        status: 500,\n        headers: responseHeaders,\n      }\n    );\n  }\n}\n\nasync function handleAnalyticsStats(\n  analyticsManager: AnalyticsManager,\n  request: Request,\n  headers: Record<string, string>\n): Promise<Response> {\n  const url = new URL(request.url);\n  const date = url.searchParams.get('date'); // YYYY-MM-DD format\n\n  const stats = await analyticsManager.getStats(date || undefined);\n\n  return new Response(\n    JSON.stringify({\n      success: true,\n      data: {\n        date: date || new Date().toISOString().split('T')[0],\n        stats,\n        generated: new Date().toISOString(),\n      },\n    }),\n    {\n      headers,\n    }\n  );\n}\n\nasync function handleRealTimeStats(\n  analyticsManager: AnalyticsManager,\n  headers: Record<string, string>\n): Promise<Response> {\n  const realTimeStats = await analyticsManager.getRealTimeStats();\n\n  return new Response(\n    JSON.stringify({\n      success: true,\n      data: realTimeStats,\n    }),\n    {\n      headers,\n    }\n  );\n}\n\nasync function handleSecurityStats(\n  securityManager: SecurityManager,\n  headers: Record<string, string>\n): Promise<Response> {\n  // This would get security-related statistics\n  // For now, return basic info\n\n  return new Response(\n    JSON.stringify({\n      success: true,\n      data: {\n        rateLimits: {\n          general: 'Active',\n          convert: 'Active',\n          admin: 'Active',\n        },\n        securityHeaders: 'Enabled',\n        cors: 'Configured',\n        timestamp: new Date().toISOString(),\n      },\n    }),\n    {\n      headers,\n    }\n  );\n}\n\nasync function handleDashboard(\n  analyticsManager: AnalyticsManager,\n  securityManager: SecurityManager,\n  headers: Record<string, string>\n): Promise<Response> {\n  const today = new Date().toISOString().split('T')[0];\n  const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n\n  // Get stats for today and yesterday\n  const [todayStats, yesterdayStats, realTimeStats] = await Promise.all([\n    analyticsManager.getStats(today),\n    analyticsManager.getStats(yesterday),\n    analyticsManager.getRealTimeStats(),\n  ]);\n\n  // Calculate trends\n  const requestsTrend =\n    yesterdayStats.totalRequests > 0\n      ? ((todayStats.totalRequests - yesterdayStats.totalRequests) / yesterdayStats.totalRequests) *\n        100\n      : 0;\n\n  const responseTimeTrend =\n    yesterdayStats.averageResponseTime > 0\n      ? ((todayStats.averageResponseTime - yesterdayStats.averageResponseTime) /\n          yesterdayStats.averageResponseTime) *\n        100\n      : 0;\n\n  return new Response(\n    JSON.stringify({\n      success: true,\n      data: {\n        overview: {\n          todayRequests: todayStats.totalRequests,\n          requestsTrend: Math.round(requestsTrend * 100) / 100,\n          averageResponseTime: todayStats.averageResponseTime,\n          responseTimeTrend: Math.round(responseTimeTrend * 100) / 100,\n          errorRate: todayStats.errorRate,\n          cacheHitRate: todayStats.cacheHitRate,\n        },\n        realTime: realTimeStats,\n        today: todayStats,\n        yesterday: yesterdayStats,\n        security: {\n          rateLimitsActive: true,\n          securityHeadersEnabled: true,\n          corsConfigured: true,\n        },\n        generated: new Date().toISOString(),\n      },\n    }),\n    {\n      headers,\n    }\n  );\n}\n\n// Middleware to record analytics for all API requests\nexport async function recordAnalyticsMiddleware(\n  request: Request,\n  response: Response,\n  env: Env,\n  startTime: number\n): Promise<void> {\n  try {\n    const analyticsManager = new AnalyticsManager(_env);\n    const url = new URL(request.url);\n\n    const event = {\n      endpoint: url.pathname,\n      method: request.method,\n      status: response.status,\n      responseTime: Date.now() - startTime,\n      userAgent: request.headers.get('User-Agent') || undefined,\n      country: request.headers.get('CF-IPCountry') || undefined,\n      timestamp: new Date().toISOString(),\n      cached: response.headers.get('X-Cache-Status') === 'HIT',\n    };\n\n    // Record asynchronously to not block response\n    analyticsManager.recordEvent(event).catch(error => {\n      if (process.env.NODE_ENV === 'development')\n        console.error('Failed to record analytics event:', error);\n    });\n  } catch (error) {\n    if (process.env.NODE_ENV === 'development') console.error('Analytics middleware error:', error);\n  }\n}\n\n// Security middleware to apply rate limiting and security checks\nexport async function securityMiddleware(\n  request: Request,\n  env: Env\n): Promise<{ allowed: boolean; response?: Response }> {\n  try {\n    const securityManager = new SecurityManager(env);\n    const url = new URL(request.url);\n\n    // Determine rate limit config based on endpoint\n    let rateLimitConfig;\n    if (url.pathname.startsWith('/api/admin')) {\n      rateLimitConfig = {\n        windowMs: 60000,\n        maxRequests: 10,\n        keyGenerator: securityManager.generateRateLimitKey.bind(securityManager),\n      };\n    } else if (url.pathname.startsWith('/api/convert')) {\n      rateLimitConfig = {\n        windowMs: 60000,\n        maxRequests: 60,\n        keyGenerator: securityManager.generateRateLimitKey.bind(securityManager),\n      };\n    } else {\n      rateLimitConfig = {\n        windowMs: 60000,\n        maxRequests: 100,\n        keyGenerator: securityManager.generateRateLimitKey.bind(securityManager),\n      };\n    }\n\n    // Check rate limit\n    const rateLimitResult = await securityManager.checkRateLimit(_request, rateLimitConfig);\n\n    if (!rateLimitResult.allowed) {\n      // Log security event\n      await securityManager.logSecurityEvent({\n        type: 'rate_limit_exceeded',\n        ip: request.headers.get('CF-Connecting-IP') || 'unknown',\n        userAgent: request.headers.get('User-Agent') || undefined,\n        endpoint: url.pathname,\n      });\n\n      const securityHeaders = securityManager.getSecurityHeaders();\n      const corsHeaders = securityManager.getCORSHeaders(\n        request.headers.get('Origin') || undefined\n      );\n\n      return {\n        allowed: false,\n        response: new Response(\n          JSON.stringify({\n            error: 'Rate Limit Exceeded',\n            message: 'Too many requests. Please try again later.',\n            retryAfter: Math.ceil((rateLimitResult.resetTime - Date.now()) / 1000),\n          }),\n          {\n            status: 429,\n            headers: {\n              'Content-Type': 'application/json',\n              'Retry-After': Math.ceil((rateLimitResult.resetTime - Date.now()) / 1000).toString(),\n              'X-RateLimit-Limit': rateLimitConfig.maxRequests.toString(),\n              'X-RateLimit-Remaining': rateLimitResult.remaining.toString(),\n              'X-RateLimit-Reset': rateLimitResult.resetTime.toString(),\n              ...securityHeaders,\n              ...corsHeaders,\n            },\n          }\n        ),\n      };\n    }\n\n    // Check for suspicious activity\n    const suspiciousCheck = await securityManager.checkSuspiciousActivity(_request);\n\n    if (suspiciousCheck.suspicious) {\n      // Log security event\n      await securityManager.logSecurityEvent({\n        type: 'suspicious_activity',\n        ip: request.headers.get('CF-Connecting-IP') || 'unknown',\n        userAgent: request.headers.get('User-Agent') || undefined,\n        endpoint: url.pathname,\n        details: { reason: suspiciousCheck.reason },\n      });\n\n      // For now, just log but don't block (could be enhanced to block in the future)\n    }\n\n    return { allowed: true };\n  } catch (error) {\n    if (process.env.NODE_ENV === 'development') console.error('Security middleware error:', error);\n    // Fail open - allow request if security check fails\n    return { allowed: true };\n  }\n}\n", "// Cache administration API for monitoring and management\n\nimport { CacheManager } from './cache-utils';\n\ninterface Env {\n  UPSTASH_REDIS_REST_URL?: string;\n  UPSTASH_REDIS_REST_TOKEN?: string;\n  REDIS_ENABLED?: string;\n}\n\nexport async function handleCacheAdmin(\n  request: Request,\n  env: Env,\n  path: string[]\n): Promise<Response> {\n  const cacheManager = new CacheManager(_env);\n  const action = path[0] || 'status';\n\n  // Basic auth check (in production, implement proper authentication)\n  const authHeader = request.headers.get('Authorization');\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return new Response(\n      JSON.stringify({\n        error: 'Unauthorized',\n        message: 'Bearer token required for cache admin endpoints',\n      }),\n      {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n\n  try {\n    switch (action) {\n      case 'status':\n        return await handleCacheStatus(cacheManager);\n\n      case 'stats':\n        return await handleCacheStats(cacheManager);\n\n      case 'health':\n        return await handleCacheHealth(cacheManager);\n\n      case 'clear':\n        if (request.method !== 'POST') {\n          return new Response(\n            JSON.stringify({\n              error: 'Method Not Allowed',\n              message: 'POST method required for cache clear',\n            }),\n            {\n              status: 405,\n              headers: { 'Content-Type': 'application/json' },\n            }\n          );\n        }\n        return await handleCacheClear(cacheManager);\n\n      default:\n        return new Response(\n          JSON.stringify({\n            error: 'Not Found',\n            message: `Cache admin action '${action}' not found`,\n            availableActions: ['status', 'stats', 'health', 'clear'],\n          }),\n          {\n            status: 404,\n            headers: { 'Content-Type': 'application/json' },\n          }\n        );\n    }\n  } catch (error) {\n    if (process.env.NODE_ENV === 'development') console.error('Cache admin error:', error);\n\n    return new Response(\n      JSON.stringify({\n        error: 'Internal Server Error',\n        message: error instanceof Error ? error.message : 'Unknown error',\n      }),\n      {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n}\n\nasync function handleCacheStatus(cacheManager: CacheManager): Promise<Response> {\n  const redisStats = cacheManager.getRedisStats();\n  const cacheStats = cacheManager.getStats();\n\n  // Calculate overall cache metrics\n  const totalRequests = Object.values(cacheStats).reduce(\n    (sum, stat) => sum + stat.totalRequests,\n    0\n  );\n  const totalHits = Object.values(cacheStats).reduce((sum, stat) => sum + stat.hits, 0);\n  const overallHitRate = totalRequests > 0 ? (totalHits / totalRequests) * 100 : 0;\n\n  return new Response(\n    JSON.stringify({\n      success: true,\n      data: {\n        redis: redisStats,\n        cache: {\n          overallHitRate: Math.round(overallHitRate * 100) / 100,\n          totalRequests,\n          totalHits,\n          totalMisses: totalRequests - totalHits,\n          categories: Object.keys(cacheStats).length,\n        },\n        timestamp: new Date().toISOString(),\n      },\n    }),\n    {\n      headers: { 'Content-Type': 'application/json' },\n    }\n  );\n}\n\nasync function handleCacheStats(cacheManager: CacheManager): Promise<Response> {\n  const cacheStats = cacheManager.getStats();\n  const redisStats = cacheManager.getRedisStats();\n\n  return new Response(\n    JSON.stringify({\n      success: true,\n      data: {\n        redis: redisStats,\n        detailed: cacheStats,\n        summary: {\n          categories: Object.keys(cacheStats).length,\n          totalRequests: Object.values(cacheStats).reduce(\n            (sum, stat) => sum + stat.totalRequests,\n            0\n          ),\n          averageHitRate:\n            Object.values(cacheStats).length > 0\n              ? Object.values(cacheStats).reduce((sum, stat) => sum + stat.hitRate, 0) /\n                Object.values(cacheStats).length\n              : 0,\n        },\n        timestamp: new Date().toISOString(),\n      },\n    }),\n    {\n      headers: { 'Content-Type': 'application/json' },\n    }\n  );\n}\n\nasync function handleCacheHealth(cacheManager: CacheManager): Promise<Response> {\n  const healthCheck = await cacheManager.healthCheck();\n\n  return new Response(\n    JSON.stringify({\n      success: true,\n      data: healthCheck,\n      timestamp: new Date().toISOString(),\n    }),\n    {\n      headers: { 'Content-Type': 'application/json' },\n    }\n  );\n}\n\nasync function handleCacheClear(cacheManager: CacheManager): Promise<Response> {\n  try {\n    await cacheManager.clearAll();\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        message: 'Cache statistics cleared successfully',\n        note: 'Redis data is preserved for other applications',\n        timestamp: new Date().toISOString(),\n      }),\n      {\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  } catch (error) {\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: 'Failed to clear cache',\n        message: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n      }),\n      {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n}\n", "// Simple cache test endpoint\n\nimport { CacheManager } from './cache-utils';\n\ninterface Env {\n  UPSTASH_REDIS_REST_URL?: string;\n  UPSTASH_REDIS_REST_TOKEN?: string;\n  REDIS_ENABLED?: string;\n}\n\nexport async function handleCacheTest(request: Request, _env: Env): Promise<Response> {\n  if (request.method !== 'GET') {\n    return new Response(\n      JSON.stringify({\n        error: 'Method Not Allowed',\n        message: 'Only GET method is supported',\n      }),\n      {\n        status: 405,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n\n  try {\n    const cacheManager = new CacheManager(_env);\n    const testKey = `test-key-${Date.now()}`;\n    const testValue = { message: 'Hello Cache!', timestamp: new Date().toISOString() };\n\n    // Test 1: Set a value\n    // Setting cache key\n    const setResult = await cacheManager.set('CONVERT_API', testKey, testValue);\n    // Set operation completed\n\n    // Test 2: Get the value immediately\n    // Getting cache key\n    const getResult = await cacheManager.get('CONVERT_API', testKey);\n    // Get operation completed\n\n    // Test 3: Redis stats\n    const redisStats = cacheManager.getRedisStats();\n    const cacheStats = cacheManager.getStats();\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        data: {\n          test: {\n            key: testKey,\n            setValue: testValue,\n            setResult,\n            getValue: getResult,\n            cacheWorking: !!getResult && JSON.stringify(getResult) === JSON.stringify(testValue),\n          },\n          redis: redisStats,\n          cache: cacheStats,\n        },\n        timestamp: new Date().toISOString(),\n      }),\n      {\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  } catch (error) {\n    console.error('Cache test error:', error);\n\n    return new Response(\n      JSON.stringify({\n        error: 'Internal Server Error',\n        message: error instanceof Error ? error.message : 'Unknown error',\n      }),\n      {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n}\n", "// Environment variables debugging endpoint\n\ninterface Env {\n  UPSTASH_REDIS_REST_URL?: string;\n  UPSTASH_REDIS_REST_TOKEN?: string;\n  REDIS_ENABLED?: string;\n}\n\nexport async function handleEnvDebug(request: Request, env: Env): Promise<Response> {\n  if (request.method !== 'GET') {\n    return new Response(\n      JSON.stringify({\n        error: 'Method Not Allowed',\n        message: 'Only GET method is supported',\n      }),\n      {\n        status: 405,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n\n  // Simple auth check - allow 'debug' token for testing\n  const authHeader = request.headers.get('Authorization');\n  if (\n    !authHeader ||\n    (!authHeader.includes('Bearer debug') && !authHeader.includes('Bearer test'))\n  ) {\n    return new Response(\n      JSON.stringify({\n        error: 'Unauthorized',\n        message: 'Use \"Bearer debug\" token for environment debugging',\n      }),\n      {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n\n  try {\n    // Check environment variables (mask sensitive data)\n    const redisUrl = env.UPSTASH_REDIS_REST_URL;\n    const redisToken = env.UPSTASH_REDIS_REST_TOKEN;\n    const redisEnabled = env.REDIS_ENABLED;\n\n    const envCheck = {\n      UPSTASH_REDIS_REST_URL: {\n        configured: !!redisUrl,\n        value: redisUrl ? `${redisUrl.substring(0, 20)}...` : null,\n        length: redisUrl?.length || 0,\n      },\n      UPSTASH_REDIS_REST_TOKEN: {\n        configured: !!redisToken,\n        value: redisToken ? `${redisToken.substring(0, 10)}...` : null,\n        length: redisToken?.length || 0,\n      },\n      REDIS_ENABLED: {\n        configured: redisEnabled !== undefined,\n        value: redisEnabled,\n        type: typeof redisEnabled,\n      },\n    };\n\n    // Test Redis connection if configured\n    let connectionTest = null;\n    if (redisUrl && redisToken) {\n      try {\n        const response = await fetch(redisUrl, {\n          method: 'POST',\n          headers: {\n            Authorization: `Bearer ${redisToken}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(['PING']),\n        });\n\n        if (response.ok) {\n          const result = await response.json();\n          connectionTest = {\n            success: true,\n            status: response.status,\n            result: result.result,\n          };\n        } else {\n          connectionTest = {\n            success: false,\n            status: response.status,\n            error: `HTTP ${response.status}`,\n          };\n        }\n      } catch (error) {\n        connectionTest = {\n          success: false,\n          error: error instanceof Error ? error.message : 'Unknown error',\n        };\n      }\n    }\n\n    // Calculate Redis enabled status\n    const shouldBeEnabled = !!(redisUrl && redisToken && redisEnabled !== 'false');\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        data: {\n          environment: envCheck,\n          redis: {\n            shouldBeEnabled,\n            connectionTest,\n            configurationComplete: !!(redisUrl && redisToken),\n          },\n          recommendations: generateRecommendations(envCheck, connectionTest, shouldBeEnabled),\n        },\n        timestamp: new Date().toISOString(),\n      }),\n      {\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  } catch (error) {\n    console.error('Environment debug error:', error);\n\n    return new Response(\n      JSON.stringify({\n        error: 'Internal Server Error',\n        message: error instanceof Error ? error.message : 'Unknown error',\n      }),\n      {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n}\n\nfunction generateRecommendations(\n  envCheck: any,\n  connectionTest: any,\n  shouldBeEnabled: boolean\n): string[] {\n  const recommendations = [];\n\n  if (!envCheck.UPSTASH_REDIS_REST_URL.configured) {\n    recommendations.push(\n      'Configure UPSTASH_REDIS_REST_URL in Cloudflare Pages environment variables'\n    );\n  }\n\n  if (!envCheck.UPSTASH_REDIS_REST_TOKEN.configured) {\n    recommendations.push(\n      'Configure UPSTASH_REDIS_REST_TOKEN in Cloudflare Pages environment variables'\n    );\n  }\n\n  if (envCheck.REDIS_ENABLED.value === 'false') {\n    recommendations.push('Set REDIS_ENABLED=true to enable Redis caching');\n  }\n\n  if (connectionTest && !connectionTest.success) {\n    recommendations.push('Check Redis URL and token - connection test failed');\n  }\n\n  if (shouldBeEnabled && connectionTest?.success) {\n    recommendations.push('\u2705 Redis configuration looks good! Cache should be working.');\n  }\n\n  if (!shouldBeEnabled) {\n    recommendations.push('Complete Redis configuration to enable caching');\n  }\n\n  return recommendations;\n}\n", "// Cloudflare Pages adapter for admin API routes\n\nimport { handleAnalytics } from './analytics-api';\nimport { handleCacheAdmin } from './cache-admin';\nimport { handleCacheTest } from './cache-test';\nimport { handleEnvDebug } from './env-debug';\n\ninterface Env {\n  UPSTASH_REDIS_REST_URL?: string;\n  UPSTASH_REDIS_REST_TOKEN?: string;\n}\n\nexport async function handleAdminRoutes(\n  request: Request,\n  env: Env,\n  path: string[]\n): Promise<Response> {\n  const endpoint = path[0] || '';\n\n  // Basic auth check (you should implement proper authentication)\n  const authHeader = request.headers.get('Authorization');\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return new Response(\n      JSON.stringify({\n        error: 'Unauthorized',\n        message: 'Bearer token required for admin endpoints',\n      }),\n      {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n\n  switch (endpoint) {\n    case 'stats':\n      return handleAdminStats(request, env);\n    case 'cache':\n      // Handle cache admin with sub-paths\n      return handleCacheAdmin(request, env, path.slice(1));\n    case 'health':\n      return handleAdminHealth(request, env);\n    case 'env-debug':\n      return handleEnvDebug(request, env);\n    case 'cache-test':\n      return handleCacheTest(request, env);\n    case 'analytics':\n      // Handle analytics with sub-paths\n      return handleAnalytics(request, env, path.slice(1));\n    default:\n      return new Response(\n        JSON.stringify({\n          error: 'Not Found',\n          message: `Admin endpoint /${path.join('/')} not found`,\n          availableEndpoints: ['stats', 'cache', 'health', 'env-debug', 'cache-test', 'analytics'],\n        }),\n        {\n          status: 404,\n          headers: { 'Content-Type': 'application/json' },\n        }\n      );\n  }\n}\n\nasync function handleAdminStats(request: Request, env: Env): Promise<Response> {\n  try {\n    // Mock stats for now (you can implement real metrics collection)\n    const stats = {\n      requests: {\n        total: 1000,\n        today: 150,\n        lastHour: 25,\n      },\n      endpoints: {\n        '/api/convert': 450,\n        '/api/now': 300,\n        '/api/health': 100,\n        '/api/v1/*': 150,\n      },\n      performance: {\n        averageResponseTime: '45ms',\n        uptime: '99.9%',\n      },\n      cache: {\n        hits: 750,\n        misses: 250,\n        hitRate: '75%',\n      },\n    };\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        data: stats,\n        timestamp: new Date().toISOString(),\n      }),\n      {\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  } catch (error) {\n    return new Response(\n      JSON.stringify({\n        error: 'Internal Server Error',\n        message: error instanceof Error ? error.message : 'Unknown error',\n      }),\n      {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n}\n\nexport async function handleAdminCache(request: Request, env: Env): Promise<Response> {\n  if (request.method === 'DELETE') {\n    // Clear cache\n    try {\n      if (env.UPSTASH_REDIS_REST_URL && env.UPSTASH_REDIS_REST_TOKEN) {\n        const response = await fetch(`${env.UPSTASH_REDIS_REST_URL}/flushall`, {\n          method: 'POST',\n          headers: {\n            Authorization: `Bearer ${env.UPSTASH_REDIS_REST_TOKEN}`,\n            'Content-Type': 'application/json',\n          },\n        });\n\n        if (response.ok) {\n          return new Response(\n            JSON.stringify({\n              success: true,\n              message: 'Cache cleared successfully',\n            }),\n            {\n              headers: { 'Content-Type': 'application/json' },\n            }\n          );\n        } else {\n          throw new Error('Failed to clear cache');\n        }\n      } else {\n        return new Response(\n          JSON.stringify({\n            success: false,\n            message: 'Redis not configured',\n          }),\n          {\n            status: 400,\n            headers: { 'Content-Type': 'application/json' },\n          }\n        );\n      }\n    } catch (error) {\n      return new Response(\n        JSON.stringify({\n          error: 'Internal Server Error',\n          message: error instanceof Error ? error.message : 'Unknown error',\n        }),\n        {\n          status: 500,\n          headers: { 'Content-Type': 'application/json' },\n        }\n      );\n    }\n  } else {\n    // Get cache info\n    return new Response(\n      JSON.stringify({\n        success: true,\n        data: {\n          status: 'active',\n          provider: 'upstash-redis',\n          configured: !!(env.UPSTASH_REDIS_REST_URL && env.UPSTASH_REDIS_REST_TOKEN),\n        },\n      }),\n      {\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n}\n\nasync function handleAdminHealth(request: Request, env: Env): Promise<Response> {\n  try {\n    const health = {\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      services: {\n        api: 'healthy',\n        cache: 'unknown',\n        database: 'not-applicable',\n      },\n      environment: {\n        platform: 'cloudflare-pages',\n        runtime: 'cloudflare-workers',\n        region: 'auto',\n      },\n    };\n\n    // Test Redis if configured\n    if (env.UPSTASH_REDIS_REST_URL && env.UPSTASH_REDIS_REST_TOKEN) {\n      try {\n        const response = await fetch(`${env.UPSTASH_REDIS_REST_URL}/ping`, {\n          method: 'POST',\n          headers: {\n            Authorization: `Bearer ${env.UPSTASH_REDIS_REST_TOKEN}`,\n            'Content-Type': 'application/json',\n          },\n        });\n\n        health.services.cache = response.ok ? 'healthy' : 'unhealthy';\n      } catch (error) {\n        health.services.cache = 'error';\n      }\n    }\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        data: health,\n      }),\n      {\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  } catch (error) {\n    return new Response(\n      JSON.stringify({\n        error: 'Internal Server Error',\n        message: error instanceof Error ? error.message : 'Unknown error',\n      }),\n      {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n}\n", "// Cloudflare Pages adapter for convert API\n\nimport { CacheManager } from './cache-utils';\n\n// Types\ninterface Env {\n  UPSTASH_REDIS_REST_URL?: string;\n  UPSTASH_REDIS_REST_TOKEN?: string;\n}\n\ninterface ConvertParams {\n  timestamp: number;\n  timezone?: string;\n  targetTimezone?: string;\n  outputFormats: string[];\n}\n\ninterface ConvertResult {\n  timestamp: number;\n  iso: string;\n  utc: string;\n  local: string;\n  formats: Record<string, string>;\n  converted?: {\n    timestamp: number;\n    iso: string;\n    local: string;\n  };\n  conversionError?: string;\n}\n\n// Pure functions\nfunction parseTimestamp(timestampParam: string | null, dateParam: string | null): number {\n  if (!timestampParam && !dateParam) {\n    throw new Error('Either timestamp or date parameter is required');\n  }\n\n  if (timestampParam) {\n    const timestamp = parseInt(timestampParam, 10);\n    if (isNaN(timestamp)) {\n      throw new Error('Invalid timestamp format');\n    }\n    return timestamp;\n  }\n\n  if (dateParam) {\n    const parsedDate = new Date(dateParam);\n    if (isNaN(parsedDate.getTime())) {\n      throw new Error(\n        'Invalid date format. Use ISO format like 2021-03-02 or 2021-03-02T10:30:00Z'\n      );\n    }\n    return Math.floor(parsedDate.getTime() / 1000);\n  }\n\n  throw new Error('Either timestamp or date parameter is required');\n}\n\nfunction parseGetRequest(url: URL): ConvertParams {\n  const timestampParam = url.searchParams.get('timestamp');\n  const dateParam = url.searchParams.get('date');\n  const timestamp = parseTimestamp(timestampParam, dateParam);\n\n  const timezone = url.searchParams.get('timezone') || undefined;\n  const targetTimezone = url.searchParams.get('targetTimezone') || undefined;\n\n  const formatsParam = url.searchParams.get('formats');\n  const outputFormats = formatsParam ? formatsParam.split(',') : [];\n\n  return { timestamp, timezone, targetTimezone, outputFormats };\n}\n\nfunction parsePostRequest(body: Record<string, unknown>): ConvertParams {\n  const timestamp = parseTimestamp(body.timestamp?.toString(), body.date?.toString());\n  const timezone = body.timezone as string;\n  const targetTimezone = body.targetTimezone;\n  const outputFormats = body.outputFormats || [];\n\n  return { timestamp, timezone, targetTimezone, outputFormats };\n}\n\nasync function parseConvertRequest(request: Request): Promise<ConvertParams> {\n  if (request.method === 'GET') {\n    const url = new URL(request.url);\n    return parseGetRequest(url);\n  } else {\n    const body = await request.json();\n    return parsePostRequest(body);\n  }\n}\n\nfunction validateConvertParams(params: ConvertParams): void {\n  if (!params.timestamp || isNaN(params.timestamp)) {\n    throw new Error('Invalid timestamp');\n  }\n\n  if (params.timestamp < 0) {\n    throw new Error('Timestamp cannot be negative');\n  }\n}\n\nfunction convertTimezone(date: Date, fromTz: string, toTz: string): Date {\n  // Basic timezone conversion using Intl API\n  // TODO: Implement proper timezone conversion using fromTz and toTz\n  void fromTz; // Acknowledge unused parameter\n  void toTz; // Acknowledge unused parameter\n\n  try {\n    const utcTime = date.getTime() + date.getTimezoneOffset() * 60000;\n    const targetTime = new Date(utcTime);\n    return targetTime;\n  } catch (error) {\n    return date; // Fallback to original date\n  }\n}\n\nfunction buildDateFormats(params: ConvertParams): ConvertResult {\n  const date = new Date(params.timestamp * 1000);\n\n  const result: ConvertResult = {\n    timestamp: params.timestamp,\n    iso: date.toISOString(),\n    utc: date.toUTCString(),\n    local: date.toLocaleString(),\n    formats: {},\n  };\n\n  // Add custom formats\n  for (const format of params.outputFormats) {\n    try {\n      switch (format.toLowerCase()) {\n        case 'iso':\n          result.formats.iso = date.toISOString();\n          break;\n        case 'utc':\n          result.formats.utc = date.toUTCString();\n          break;\n        case 'local':\n          result.formats.local = date.toLocaleString();\n          break;\n        default:\n          result.formats[format] = date.toLocaleString('en-US', { timeZone: format });\n      }\n    } catch (error) {\n      result.formats[format] = 'Invalid format';\n    }\n  }\n\n  // Add timezone conversion if specified\n  if (params.timezone && params.targetTimezone) {\n    try {\n      const convertedDate = convertTimezone(date, params.timezone, params.targetTimezone);\n      result.converted = {\n        timestamp: Math.floor(convertedDate.getTime() / 1000),\n        iso: convertedDate.toISOString(),\n        local: convertedDate.toLocaleString(),\n      };\n    } catch (error) {\n      result.conversionError = 'Invalid timezone conversion';\n    }\n  }\n\n  return result;\n}\n\nfunction buildConvertResponse(result: ConvertResult, startTime: number, cached: boolean): Response {\n  return new Response(\n    JSON.stringify({\n      success: true,\n      data: result,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        processingTime: `${Date.now() - startTime}ms`,\n        cached,\n      },\n    }),\n    {\n      headers: { 'Content-Type': 'application/json' },\n    }\n  );\n}\n\nfunction buildErrorResponse(error: string, status: number = 400): Response {\n  return new Response(\n    JSON.stringify({\n      error: status === 500 ? 'Internal Server Error' : 'Bad Request',\n      message: error,\n    }),\n    {\n      status,\n      headers: { 'Content-Type': 'application/json' },\n    }\n  );\n}\n\nfunction generateCacheKey(params: ConvertParams): string {\n  return `${params.timestamp}_${params.outputFormats.join(',')}_${params.timezone || 'none'}_${params.targetTimezone || 'none'}`;\n}\n\nexport async function handleConvert(request: Request, env: Env): Promise<Response> {\n  // Validate HTTP method\n  if (request.method !== 'POST' && request.method !== 'GET') {\n    return buildErrorResponse('Only GET and POST methods are supported', 405);\n  }\n\n  const cacheManager = new CacheManager(env);\n  const startTime = Date.now();\n\n  try {\n    // Parse and validate request parameters\n    const params = await parseConvertRequest(request);\n    validateConvertParams(params);\n\n    // Generate cache key and check cache\n    const cacheKey = generateCacheKey(params);\n    const cachedResult = await cacheManager.get('CONVERT_API', cacheKey);\n\n    if (cachedResult) {\n      return buildConvertResponse(cachedResult, startTime, true);\n    }\n\n    // Perform conversion\n    const result = buildDateFormats(params);\n\n    // Cache the result for future requests\n    try {\n      await cacheManager.set('CONVERT_API', cacheKey, result);\n    } catch (error) {\n      // Failed to cache convert result - non-critical error\n    }\n\n    return buildConvertResponse(result, startTime, false);\n  } catch (error) {\n    // Convert API Error logged for debugging\n    const message = error instanceof Error ? error.message : 'Unknown error';\n\n    // Determine if this is a client error (400) or server error (500)\n    const isClientError =\n      error instanceof Error &&\n      (message.includes('timestamp') ||\n        message.includes('date') ||\n        message.includes('Invalid') ||\n        message.includes('required') ||\n        message.includes('negative') ||\n        message.includes('cannot'));\n\n    const status = isClientError ? 400 : 500;\n    return buildErrorResponse(message, status);\n  }\n}\n", "// Cloudflare Pages adapter for health API\n\nimport { CacheManager } from './cache-utils';\n\ninterface Env {\n  UPSTASH_REDIS_REST_URL?: string;\n  UPSTASH_REDIS_REST_TOKEN?: string;\n}\n\nexport async function handleHealth(request: Request, env: Env): Promise<Response> {\n  if (request.method !== 'GET') {\n    return new Response(\n      JSON.stringify({\n        error: 'Method Not Allowed',\n        message: 'Only GET method is supported',\n      }),\n      {\n        status: 405,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n\n  try {\n    const url = new URL(request.url);\n    const detailed = url.searchParams.get('detailed') === 'true';\n\n    const startTime = Date.now();\n    const cacheManager = new CacheManager(env);\n\n    // Basic health check\n    const health = {\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      uptime: 0, // Not available in Cloudflare Workers\n      version: '1.0.0',\n      environment: env.NODE_ENV || 'production',\n      responseTime: 0,\n    };\n\n    // Test cache system (Redis + fallback)\n    const cacheHealth = await cacheManager.healthCheck();\n    const redisStatus = cacheHealth.redis ? 'healthy' : 'degraded';\n\n    const responseTime = Date.now() - startTime;\n    health.responseTime = responseTime;\n\n    const result: any = {\n      ...health,\n      services: {\n        api: 'healthy',\n        cache: cacheHealth.status,\n        redis: redisStatus,\n      },\n    };\n\n    if (detailed) {\n      result.details = {\n        memory: {\n          used: 'N/A (Cloudflare)',\n          total: 'N/A (Cloudflare)',\n        },\n        system: {\n          platform: 'cloudflare-pages',\n          runtime: 'cloudflare-workers',\n        },\n        performance: {\n          responseTime: `${responseTime}ms`,\n          requestsPerSecond: 'N/A',\n        },\n        cache: {\n          ...cacheHealth.stats,\n          enabled: cacheManager.getRedisStats().enabled,\n        },\n      };\n    }\n\n    // Determine overall status\n    if (redisStatus === 'error' || redisStatus === 'unhealthy') {\n      result.status = 'degraded';\n    }\n\n    const statusCode = result.status === 'healthy' ? 200 : result.status === 'degraded' ? 200 : 503;\n\n    return new Response(JSON.stringify(result), {\n      status: statusCode,\n      headers: { 'Content-Type': 'application/json' },\n    });\n  } catch (error) {\n    console.error('Health API Error:', error);\n\n    return new Response(\n      JSON.stringify({\n        status: 'unhealthy',\n        timestamp: new Date().toISOString(),\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }),\n      {\n        status: 503,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n}\n", "// Cloudflare Pages adapter for now API\n\ninterface Env {\n  UPSTASH_REDIS_REST_URL?: string;\n  UPSTASH_REDIS_REST_TOKEN?: string;\n}\n\nexport async function handleNow(request: Request, _env: Env): Promise<Response> {\n  if (request.method !== 'GET') {\n    return new Response(\n      JSON.stringify({\n        error: 'Method Not Allowed',\n        message: 'Only GET method is supported',\n      }),\n      {\n        status: 405,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n\n  try {\n    const url = new URL(request.url);\n    const timezone = url.searchParams.get('timezone');\n    const format = url.searchParams.get('format') || 'all';\n\n    const now = new Date();\n    const timestamp = Math.floor(now.getTime() / 1000);\n\n    const result: any = {\n      timestamp,\n      milliseconds: now.getTime(),\n      iso: now.toISOString(),\n      utc: now.toUTCString(),\n      local: now.toLocaleString(),\n    };\n\n    // Add timezone-specific time if requested\n    if (timezone) {\n      try {\n        result.timezone = {\n          name: _timezone,\n          time: now.toLocaleString('en-US', { timeZone: timezone }),\n          iso: `${now.toLocaleString('sv-SE', { timeZone: timezone }).replace(' ', 'T')}Z`,\n        };\n      } catch (error) {\n        result.timezoneError = 'Invalid timezone';\n      }\n    }\n\n    // Filter result based on format parameter\n    if (format !== 'all') {\n      const filteredResult: any = { timestamp };\n\n      switch (format.toLowerCase()) {\n        case 'iso':\n          filteredResult.iso = result.iso;\n          break;\n        case 'utc':\n          filteredResult.utc = result.utc;\n          break;\n        case 'local':\n          filteredResult.local = result.local;\n          break;\n        case 'milliseconds':\n          filteredResult.milliseconds = result.milliseconds;\n          break;\n        default:\n          // Return all if format is unrecognized\n          return new Response(JSON.stringify(result), {\n            headers: { 'Content-Type': 'application/json' },\n          });\n      }\n\n      return new Response(JSON.stringify(filteredResult), {\n        headers: { 'Content-Type': 'application/json' },\n      });\n    }\n\n    return new Response(JSON.stringify(result), {\n      headers: { 'Content-Type': 'application/json' },\n    });\n  } catch (error) {\n    console.error('Now API Error:', error);\n\n    return new Response(\n      JSON.stringify({\n        error: 'Internal Server Error',\n        message: error instanceof Error ? error.message : 'Unknown error',\n      }),\n      {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n}\n", "// Cloudflare Pages adapter for v1 API routes\n\ninterface Env {\n  UPSTASH_REDIS_REST_URL?: string;\n  UPSTASH_REDIS_REST_TOKEN?: string;\n}\n\nexport async function handleV1Routes(\n  request: Request,\n  env: Env,\n  path: string[]\n): Promise<Response> {\n  const endpoint = path[0] || '';\n\n  switch (endpoint) {\n    case 'convert':\n      return handleV1Convert(request, env);\n    case 'batch':\n      return handleV1Batch(request, env);\n    case 'formats':\n      return handleV1Formats(request, env);\n    case 'timezones':\n      return handleV1Timezones(request, env);\n    case 'health':\n      return handleV1Health(request, env);\n    default:\n      return new Response(\n        JSON.stringify({\n          error: 'Not Found',\n          message: `V1 API endpoint /${path.join('/')} not found`,\n          availableEndpoints: ['convert', 'batch', 'formats', 'timezones', 'health'],\n        }),\n        {\n          status: 404,\n          headers: { 'Content-Type': 'application/json' },\n        }\n      );\n  }\n}\n\nasync function handleV1Convert(request: Request, _env: Env): Promise<Response> {\n  // Enhanced convert with more features\n  if (request.method !== 'POST') {\n    return new Response(\n      JSON.stringify({\n        error: 'Method Not Allowed',\n        message: 'Only POST method is supported for v1/convert',\n      }),\n      {\n        status: 405,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n\n  try {\n    const body = await request.json();\n    const {\n      timestamp,\n      outputFormats = [],\n      _timezone,\n      targetTimezone,\n      includeMetadata = false,\n    } = body;\n\n    if (!timestamp || isNaN(timestamp)) {\n      return new Response(\n        JSON.stringify({\n          error: 'Bad Request',\n          message: 'Valid timestamp is required',\n        }),\n        {\n          status: 400,\n          headers: { 'Content-Type': 'application/json' },\n        }\n      );\n    }\n\n    const date = new Date(timestamp * 1000);\n\n    const result: any = {\n      input: { timestamp, _timezone, targetTimezone },\n      output: {\n        timestamp,\n        iso: date.toISOString(),\n        utc: date.toUTCString(),\n        local: date.toLocaleString(),\n        unix: timestamp,\n        milliseconds: timestamp * 1000,\n      },\n    };\n\n    // Add custom formats\n    if (outputFormats.length > 0) {\n      result.output.formats = {};\n      for (const format of outputFormats) {\n        try {\n          result.output.formats[format] = date.toLocaleString('en-US', { timeZone: format });\n        } catch (error) {\n          result.output.formats[format] = 'Invalid format';\n        }\n      }\n    }\n\n    if (includeMetadata) {\n      result.metadata = {\n        processingTime: `${Date.now() % 1000}ms`,\n        timestamp: new Date().toISOString(),\n        version: 'v1',\n      };\n    }\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        data: result,\n      }),\n      {\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  } catch (error) {\n    return new Response(\n      JSON.stringify({\n        error: 'Internal Server Error',\n        message: error instanceof Error ? error.message : 'Unknown error',\n      }),\n      {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n}\n\nasync function handleV1Batch(request: Request, _env: Env): Promise<Response> {\n  if (request.method !== 'POST') {\n    return new Response(\n      JSON.stringify({\n        error: 'Method Not Allowed',\n        message: 'Only POST method is supported for v1/batch',\n      }),\n      {\n        status: 405,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n\n  try {\n    const body = await request.json();\n    const { timestamps, _outputFormats = [] } = body;\n\n    if (!Array.isArray(timestamps) || timestamps.length === 0) {\n      return new Response(\n        JSON.stringify({\n          error: 'Bad Request',\n          message: 'Array of timestamps is required',\n        }),\n        {\n          status: 400,\n          headers: { 'Content-Type': 'application/json' },\n        }\n      );\n    }\n\n    if (timestamps.length > 100) {\n      return new Response(\n        JSON.stringify({\n          error: 'Bad Request',\n          message: 'Maximum 100 timestamps allowed per batch',\n        }),\n        {\n          status: 400,\n          headers: { 'Content-Type': 'application/json' },\n        }\n      );\n    }\n\n    const results = timestamps.map((timestamp: number) => {\n      if (!timestamp || isNaN(timestamp)) {\n        return { error: 'Invalid timestamp', timestamp };\n      }\n\n      const date = new Date(timestamp * 1000);\n      return {\n        timestamp,\n        iso: date.toISOString(),\n        utc: date.toUTCString(),\n        local: date.toLocaleString(),\n      };\n    });\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        data: {\n          results,\n          count: results.length,\n          processed: results.filter(r => !r.error).length,\n          errors: results.filter(r => r.error).length,\n        },\n      }),\n      {\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  } catch (error) {\n    return new Response(\n      JSON.stringify({\n        error: 'Internal Server Error',\n        message: error instanceof Error ? error.message : 'Unknown error',\n      }),\n      {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n}\n\nasync function handleV1Formats(_request: Request, _env: Env): Promise<Response> {\n  const formats = {\n    timestamp: 'Unix timestamp (seconds since epoch)',\n    milliseconds: 'Milliseconds since epoch',\n    iso: 'ISO 8601 format (YYYY-MM-DDTHH:mm:ss.sssZ)',\n    utc: 'UTC string format',\n    local: 'Local string format',\n    custom: 'Custom timezone-specific format',\n  };\n\n  return new Response(\n    JSON.stringify({\n      success: true,\n      data: { formats },\n    }),\n    {\n      headers: { 'Content-Type': 'application/json' },\n    }\n  );\n}\n\nasync function handleV1Timezones(_request: Request, _env: Env): Promise<Response> {\n  // Basic timezone list (you can expand this)\n  const timezones = [\n    'UTC',\n    'America/New_York',\n    'America/Los_Angeles',\n    'Europe/London',\n    'Europe/Paris',\n    'Asia/Tokyo',\n    'Asia/Shanghai',\n    'Australia/Sydney',\n  ];\n\n  return new Response(\n    JSON.stringify({\n      success: true,\n      data: { timezones, count: timezones.length },\n    }),\n    {\n      headers: { 'Content-Type': 'application/json' },\n    }\n  );\n}\n\nasync function handleV1Health(_request: Request, _env: Env): Promise<Response> {\n  return new Response(\n    JSON.stringify({\n      status: 'healthy',\n      version: 'v1',\n      timestamp: new Date().toISOString(),\n    }),\n    {\n      headers: { 'Content-Type': 'application/json' },\n    }\n  );\n}\n", "// Date difference calculation API\n\nimport { recordAnalyticsMiddleware } from './analytics-api';\nimport { CacheManager } from './cache-utils';\nimport { RATE_LIMITS, SecurityManager } from './security';\n\ninterface Env {\n  UPSTASH_REDIS_REST_URL?: string;\n  UPSTASH_REDIS_REST_TOKEN?: string;\n  REDIS_ENABLED?: string;\n}\n\ninterface DateDiffRequest {\n  startDate: string;\n  endDate: string;\n  unit?:\n    | 'milliseconds'\n    | 'seconds'\n    | 'minutes'\n    | 'hours'\n    | 'days'\n    | 'weeks'\n    | 'months'\n    | 'years'\n    | 'all';\n  absolute?: boolean;\n  includeTime?: boolean;\n}\n\ninterface _DateDiffResponse {\n  success: boolean;\n  data: {\n    startDate: string;\n    endDate: string;\n    difference: {\n      milliseconds: number;\n      seconds: number;\n      minutes: number;\n      hours: number;\n      days: number;\n      weeks: number;\n      months: number;\n      years: number;\n    };\n    humanReadable: string;\n    direction: 'future' | 'past';\n    absolute: boolean;\n  };\n  metadata: {\n    timestamp: string;\n    processingTime: string;\n    cached: boolean;\n  };\n}\n\nexport async function handleDateDiff(request: Request, env: Env): Promise<Response> {\n  const startTime = Date.now();\n  const securityManager = new SecurityManager(env);\n  const cacheManager = new CacheManager(env);\n\n  // Apply security middleware\n  const securityCheck = await securityManager.checkRateLimit(_request, RATE_LIMITS.API_GENERAL);\n  if (!securityCheck.allowed) {\n    return new Response(\n      JSON.stringify({\n        error: 'Rate Limit Exceeded',\n        message: 'Too many requests. Please try again later.',\n      }),\n      {\n        status: 429,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n\n  if (request.method !== 'GET' && request.method !== 'POST') {\n    return new Response(\n      JSON.stringify({\n        error: 'Method Not Allowed',\n        message: 'Only GET and POST methods are supported',\n      }),\n      {\n        status: 405,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n\n  try {\n    let params: DateDiffRequest;\n\n    if (request.method === 'GET') {\n      const url = new URL(request.url);\n      params = {\n        startDate: url.searchParams.get('startDate') || '',\n        endDate: url.searchParams.get('endDate') || '',\n        unit: (url.searchParams.get('unit') as any) || 'all',\n        absolute: url.searchParams.get('absolute') !== 'false',\n        includeTime: url.searchParams.get('includeTime') === 'true',\n      };\n    } else {\n      const body = await request.json();\n      params = {\n        unit: 'all',\n        absolute: true,\n        includeTime: false,\n        ...body,\n      };\n    }\n\n    // Validate input\n    const validation = securityManager.validateInput(params, {\n      startDate: { required: true, type: 'string' },\n      endDate: { required: true, type: 'string' },\n      unit: { type: 'string' },\n    });\n\n    if (!validation.valid) {\n      return new Response(\n        JSON.stringify({\n          error: 'Bad Request',\n          message: 'Invalid input parameters',\n          details: validation.errors,\n        }),\n        {\n          status: 400,\n          headers: { 'Content-Type': 'application/json' },\n        }\n      );\n    }\n\n    // Generate cache key\n    const cacheKey = JSON.stringify(params);\n\n    // Try to get cached result\n    const cachedResult = await cacheManager.get('CONVERT_API', cacheKey);\n    if (cachedResult) {\n      const response = new Response(\n        JSON.stringify({\n          success: true,\n          data: cachedResult,\n          metadata: {\n            timestamp: new Date().toISOString(),\n            processingTime: `${Date.now() - startTime}ms`,\n            cached: true,\n          },\n        }),\n        {\n          headers: { 'Content-Type': 'application/json' },\n        }\n      );\n\n      recordAnalyticsMiddleware(_request, response, _env, startTime);\n      return response;\n    }\n\n    // Calculate date difference\n    const result = calculateDateDifference(params);\n\n    // Cache the result\n    try {\n      await cacheManager.set('CONVERT_API', cacheKey, result);\n    } catch (error) {\n      console.error('Failed to cache date diff result:', error);\n    }\n\n    const response = new Response(\n      JSON.stringify({\n        success: true,\n        data: result,\n        metadata: {\n          timestamp: new Date().toISOString(),\n          processingTime: `${Date.now() - startTime}ms`,\n          cached: false,\n        },\n      }),\n      {\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n\n    recordAnalyticsMiddleware(_request, response, _env, startTime);\n    return response;\n  } catch (error) {\n    console.error('Date diff API error:', error);\n\n    const response = new Response(\n      JSON.stringify({\n        error: 'Internal Server Error',\n        message: error instanceof Error ? error.message : 'Unknown error',\n      }),\n      {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n\n    recordAnalyticsMiddleware(_request, response, _env, startTime);\n    return response;\n  }\n}\n\nfunction calculateDateDifference(params: DateDiffRequest): any {\n  // Parse dates\n  let startDate: Date;\n  let endDate: Date;\n\n  try {\n    startDate = new Date(params.startDate);\n    endDate = new Date(params.endDate);\n  } catch (error) {\n    throw new Error('Invalid date format');\n  }\n\n  if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {\n    throw new Error('Invalid date format');\n  }\n\n  // Calculate raw difference in milliseconds\n  const rawDiff = endDate.getTime() - startDate.getTime();\n  const absoluteDiff = Math.abs(rawDiff);\n  const direction = rawDiff >= 0 ? 'future' : 'past';\n\n  // Use absolute value if requested\n  const diff = params.absolute ? absoluteDiff : rawDiff;\n\n  // Calculate all units\n  const milliseconds = diff;\n  const seconds = Math.floor(diff / 1000);\n  const minutes = Math.floor(diff / (1000 * 60));\n  const hours = Math.floor(diff / (1000 * 60 * 60));\n  const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n  const weeks = Math.floor(days / 7);\n\n  // Calculate months and years more accurately\n  let months = 0;\n  let years = 0;\n\n  if (params.includeTime) {\n    // Simple calculation for months and years\n    months = Math.floor(days / 30.44); // Average days per month\n    years = Math.floor(days / 365.25); // Average days per year\n  } else {\n    // More accurate calculation using date arithmetic\n    const tempStart = new Date(startDate);\n    const tempEnd = new Date(endDate);\n\n    // Calculate years\n    years = tempEnd.getFullYear() - tempStart.getFullYear();\n\n    // Calculate months\n    months =\n      (tempEnd.getFullYear() - tempStart.getFullYear()) * 12 +\n      (tempEnd.getMonth() - tempStart.getMonth());\n\n    // Adjust if end day is before start day in the month\n    if (tempEnd.getDate() < tempStart.getDate()) {\n      months--;\n    }\n\n    // Adjust years based on months\n    years = Math.floor(months / 12);\n  }\n\n  // Generate human readable string\n  const humanReadable = generateHumanReadable(absoluteDiff, direction, params.absolute);\n\n  return {\n    startDate: startDate.toISOString(),\n    endDate: endDate.toISOString(),\n    difference: {\n      milliseconds,\n      seconds,\n      minutes,\n      hours,\n      days,\n      weeks,\n      months: Math.abs(months),\n      years: Math.abs(years),\n    },\n    humanReadable,\n    direction,\n    absolute: params.absolute || false,\n  };\n}\n\nfunction generateHumanReadable(diff: number, direction: string, absolute: boolean): string {\n  const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n  const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n  const seconds = Math.floor((diff % (1000 * 60)) / 1000);\n\n  const parts: string[] = [];\n\n  if (days > 0) {\n    parts.push(`${days} day${days !== 1 ? 's' : ''}`);\n  }\n  if (hours > 0) {\n    parts.push(`${hours} hour${hours !== 1 ? 's' : ''}`);\n  }\n  if (minutes > 0) {\n    parts.push(`${minutes} minute${minutes !== 1 ? 's' : ''}`);\n  }\n  if (seconds > 0 && parts.length < 2) {\n    // Only show seconds if not too many other units\n    parts.push(`${seconds} second${seconds !== 1 ? 's' : ''}`);\n  }\n\n  if (parts.length === 0) {\n    return 'Less than a second';\n  }\n\n  let result = parts.slice(0, 2).join(', '); // Show max 2 units\n\n  if (!absolute && direction === 'past') {\n    result += ' ago';\n  } else if (!absolute && direction === 'future') {\n    result = `in ${result}`;\n  }\n\n  return result;\n}\n", "// Custom format template API\n\nimport { recordAnalyticsMiddleware } from './analytics-api';\nimport { CacheManager } from './cache-utils';\nimport { RATE_LIMITS, SecurityManager } from './security';\n\ninterface Env {\n  UPSTASH_REDIS_REST_URL?: string;\n  UPSTASH_REDIS_REST_TOKEN?: string;\n  REDIS_ENABLED?: string;\n}\n\ninterface FormatRequest {\n  timestamp?: number;\n  date?: string;\n  format: string;\n  timezone?: string;\n  locale?: string;\n}\n\n// Predefined format templates\nconst FORMAT_TEMPLATES = {\n  iso: 'YYYY-MM-DDTHH:mm:ss.sssZ',\n  'iso-date': 'YYYY-MM-DD',\n  'iso-time': 'HH:mm:ss',\n  'us-date': 'MM/DD/YYYY',\n  'us-datetime': 'MM/DD/YYYY HH:mm:ss',\n  'eu-date': 'DD/MM/YYYY',\n  'eu-datetime': 'DD/MM/YYYY HH:mm:ss',\n  readable: 'MMMM Do, YYYY',\n  'readable-full': 'dddd, MMMM Do, YYYY [at] h:mm A',\n  compact: 'YYYYMMDD',\n  'compact-time': 'YYYYMMDDHHmmss',\n  unix: 'X',\n  'unix-ms': 'x',\n  rfc2822: 'ddd, DD MMM YYYY HH:mm:ss ZZ',\n  sql: 'YYYY-MM-DD HH:mm:ss',\n  filename: 'YYYY-MM-DD_HH-mm-ss',\n  log: 'YYYY-MM-DD HH:mm:ss.SSS',\n};\n\nexport async function handleFormat(request: Request, env: Env): Promise<Response> {\n  const startTime = Date.now();\n  const securityManager = new SecurityManager(env);\n  const cacheManager = new CacheManager(env);\n\n  // Apply security middleware\n  const securityCheck = await securityManager.checkRateLimit(request, RATE_LIMITS.API_GENERAL);\n  if (!securityCheck.allowed) {\n    return new Response(\n      JSON.stringify({\n        error: 'Rate Limit Exceeded',\n        message: 'Too many requests. Please try again later.',\n      }),\n      {\n        status: 429,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n\n  if (request.method !== 'GET' && request.method !== 'POST') {\n    return new Response(\n      JSON.stringify({\n        error: 'Method Not Allowed',\n        message: 'Only GET and POST methods are supported',\n      }),\n      {\n        status: 405,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n\n  try {\n    let params: FormatRequest;\n\n    if (request.method === 'GET') {\n      const url = new URL(request.url);\n\n      // Special endpoint to list available templates\n      if (url.pathname.endsWith('/templates')) {\n        return new Response(\n          JSON.stringify({\n            success: true,\n            data: {\n              templates: FORMAT_TEMPLATES,\n              examples: generateTemplateExamples(),\n            },\n            metadata: {\n              timestamp: new Date().toISOString(),\n              processingTime: `${Date.now() - startTime}ms`,\n            },\n          }),\n          {\n            headers: { 'Content-Type': 'application/json' },\n          }\n        );\n      }\n\n      params = {\n        timestamp: url.searchParams.get('timestamp')\n          ? parseInt(url.searchParams.get('timestamp')!)\n          : undefined,\n        date: url.searchParams.get('date') || undefined,\n        format: url.searchParams.get('format') || 'iso',\n        timezone: url.searchParams.get('timezone') || undefined,\n        locale: url.searchParams.get('locale') || 'en',\n      };\n    } else {\n      const body = await request.json();\n      params = {\n        format: 'iso',\n        locale: 'en',\n        ...body,\n      };\n    }\n\n    // Validate input\n    const validation = securityManager.validateInput(params, {\n      format: { required: true, type: 'string', maxLength: 100 },\n      timezone: { type: 'string', maxLength: 50 },\n      locale: { type: 'string', maxLength: 10 },\n    });\n\n    if (!validation.valid) {\n      return new Response(\n        JSON.stringify({\n          error: 'Bad Request',\n          message: 'Invalid input parameters',\n          details: validation.errors,\n        }),\n        {\n          status: 400,\n          headers: { 'Content-Type': 'application/json' },\n        }\n      );\n    }\n\n    if (!params.timestamp && !params._date) {\n      return new Response(\n        JSON.stringify({\n          error: 'Bad Request',\n          message: 'Either timestamp or date parameter is required',\n        }),\n        {\n          status: 400,\n          headers: { 'Content-Type': 'application/json' },\n        }\n      );\n    }\n\n    // Generate cache key\n    const cacheKey = JSON.stringify(params);\n\n    // Try to get cached result\n    const cachedResult = await cacheManager.get('CONVERT_API', cacheKey);\n    if (cachedResult) {\n      const response = new Response(\n        JSON.stringify({\n          success: true,\n          data: cachedResult,\n          metadata: {\n            timestamp: new Date().toISOString(),\n            processingTime: `${Date.now() - startTime}ms`,\n            cached: true,\n          },\n        }),\n        {\n          headers: { 'Content-Type': 'application/json' },\n        }\n      );\n\n      recordAnalyticsMiddleware(_request, response, _env, startTime);\n      return response;\n    }\n\n    // Format the date\n    const result = formatDate(params);\n\n    // Cache the result\n    try {\n      await cacheManager.set('CONVERT_API', cacheKey, result);\n    } catch (error) {\n      console.error('Failed to cache format result:', error);\n    }\n\n    const response = new Response(\n      JSON.stringify({\n        success: true,\n        data: result,\n        metadata: {\n          timestamp: new Date().toISOString(),\n          processingTime: `${Date.now() - startTime}ms`,\n          cached: false,\n        },\n      }),\n      {\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n\n    recordAnalyticsMiddleware(_request, response, _env, startTime);\n    return response;\n  } catch (error) {\n    console.error('Format API error:', error);\n\n    const response = new Response(\n      JSON.stringify({\n        error: 'Internal Server Error',\n        message: error instanceof Error ? error.message : 'Unknown error',\n      }),\n      {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n\n    recordAnalyticsMiddleware(_request, response, _env, startTime);\n    return response;\n  }\n}\n\nfunction formatDate(params: FormatRequest): any {\n  // Get the date object\n  let date: Date;\n\n  if (params.timestamp) {\n    date = new Date(params.timestamp * 1000);\n  } else if (params._date) {\n    date = new Date(params._date);\n  } else {\n    throw new Error('No date provided');\n  }\n\n  if (isNaN(date.getTime())) {\n    throw new Error('Invalid date');\n  }\n\n  // Get format template\n  let formatString = params.format;\n  if (FORMAT_TEMPLATES[params.format as keyof typeof FORMAT_TEMPLATES]) {\n    formatString = FORMAT_TEMPLATES[params.format as keyof typeof FORMAT_TEMPLATES];\n  }\n\n  // Apply basic formatting (simplified implementation)\n  const formatted = applyFormat(_date, formatString, params._timezone, params._locale);\n\n  return {\n    input: {\n      timestamp: params.timestamp,\n      date: params._date,\n      format: params.format,\n      timezone: params._timezone,\n      locale: params._locale,\n    },\n    output: {\n      formatted,\n      formatString,\n      originalDate: date.toISOString(),\n    },\n    template: FORMAT_TEMPLATES[params.format as keyof typeof FORMAT_TEMPLATES]\n      ? {\n          name: params.format,\n          pattern: FORMAT_TEMPLATES[params.format as keyof typeof FORMAT_TEMPLATES],\n        }\n      : null,\n  };\n}\n\nfunction applyFormat(date: Date, format: string, _timezone?: string, _locale?: string): string {\n  // Enhanced implementation with proper month names and ordinals\n\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  const hours = date.getHours();\n  const minutes = date.getMinutes();\n  const seconds = date.getSeconds();\n  const milliseconds = date.getMilliseconds();\n\n  // Month names\n  const monthNames = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  const monthNamesShort = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n\n  // Day names\n  const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const dayNamesShort = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n  // Ordinal suffix\n  const getOrdinalSuffix = (day: number): string => {\n    if (day >= 11 && day <= 13) return 'th';\n    switch (day % 10) {\n      case 1:\n        return 'st';\n      case 2:\n        return 'nd';\n      case 3:\n        return 'rd';\n      default:\n        return 'th';\n    }\n  };\n\n  // Handle special cases first\n  if (format === 'X') {\n    return Math.floor(date.getTime() / 1000).toString();\n  }\n  if (format === 'x') {\n    return date.getTime().toString();\n  }\n\n  // Advanced replacements - order matters! Longer patterns first\n  let result = format\n    // Year\n    .replace(/YYYY/g, year.toString())\n    .replace(/YY/g, year.toString().slice(-2))\n\n    // Month - longer patterns first to avoid conflicts\n    .replace(/MMMM/g, monthNames[month - 1])\n    .replace(/MMM/g, monthNamesShort[month - 1])\n    .replace(/MM/g, month.toString().padStart(2, '0'))\n    .replace(/\\bM\\b/g, month.toString()) // Use word boundary to avoid conflicts\n\n    // Day - longer patterns first\n    .replace(/dddd/g, dayNames[date.getDay()])\n    .replace(/ddd/g, dayNamesShort[date.getDay()])\n    .replace(/Do/g, day.toString() + getOrdinalSuffix(day))\n    .replace(/DD/g, day.toString().padStart(2, '0'))\n    .replace(/\\bD\\b/g, day.toString()) // Use word boundary\n\n    // Hour - longer patterns first\n    .replace(/HH/g, hours.toString().padStart(2, '0'))\n    .replace(/hh/g, (hours % 12 || 12).toString().padStart(2, '0'))\n    .replace(/\\bH\\b/g, hours.toString()) // Use word boundary\n    .replace(/\\bh\\b/g, (hours % 12 || 12).toString())\n\n    // Minute - longer patterns first\n    .replace(/mm/g, minutes.toString().padStart(2, '0'))\n    .replace(/\\bm\\b/g, minutes.toString()) // Use word boundary\n\n    // Second - longer patterns first\n    .replace(/ss/g, seconds.toString().padStart(2, '0'))\n    .replace(/\\bs\\b/g, seconds.toString()) // Use word boundary\n\n    // Millisecond\n    .replace(/SSS/g, milliseconds.toString().padStart(3, '0'))\n    .replace(/sss/g, milliseconds.toString().padStart(3, '0'))\n\n    // AM/PM\n    .replace(/A/g, hours >= 12 ? 'PM' : 'AM')\n    .replace(/a/g, hours >= 12 ? 'pm' : 'am');\n\n  // Handle timezone offset\n  if (result.includes('Z')) {\n    result = result.replace(/Z/g, 'Z');\n  }\n\n  return result;\n}\n\nfunction generateTemplateExamples(): Record<string, string> {\n  const now = new Date();\n  const examples: Record<string, string> = {};\n\n  for (const [name, template] of Object.entries(FORMAT_TEMPLATES)) {\n    try {\n      examples[name] = applyFormat(now, template);\n    } catch (error) {\n      examples[name] = 'Error formatting';\n    }\n  }\n\n  return examples;\n}\n", "// Enhanced timezones API with search and detailed information\n\nimport { recordAnalyticsMiddleware } from './analytics-api';\nimport { CacheManager } from './cache-utils';\nimport { RATE_LIMITS, SecurityManager } from './security';\n\ninterface Env {\n  UPSTASH_REDIS_REST_URL?: string;\n  UPSTASH_REDIS_REST_TOKEN?: string;\n  REDIS_ENABLED?: string;\n}\n\ninterface TimezoneInfo {\n  id: string;\n  name: string;\n  abbreviation: string;\n  offset: string;\n  offsetMinutes: number;\n  country: string;\n  region: string;\n  city: string;\n  isDST: boolean;\n  utcOffset: string;\n}\n\n// Comprehensive timezone data (subset for demo)\nconst TIMEZONE_DATA: TimezoneInfo[] = [\n  {\n    id: 'America/New_York',\n    name: 'Eastern Time',\n    abbreviation: 'EST/EDT',\n    offset: '-05:00',\n    offsetMinutes: -300,\n    country: 'US',\n    region: 'America',\n    city: 'New York',\n    isDST: false,\n    utcOffset: 'UTC-5',\n  },\n  {\n    id: 'America/Los_Angeles',\n    name: 'Pacific Time',\n    abbreviation: 'PST/PDT',\n    offset: '-08:00',\n    offsetMinutes: -480,\n    country: 'US',\n    region: 'America',\n    city: 'Los Angeles',\n    isDST: false,\n    utcOffset: 'UTC-8',\n  },\n  {\n    id: 'Europe/London',\n    name: 'Greenwich Mean Time',\n    abbreviation: 'GMT/BST',\n    offset: '+00:00',\n    offsetMinutes: 0,\n    country: 'GB',\n    region: 'Europe',\n    city: 'London',\n    isDST: false,\n    utcOffset: 'UTC+0',\n  },\n  {\n    id: 'Europe/Paris',\n    name: 'Central European Time',\n    abbreviation: 'CET/CEST',\n    offset: '+01:00',\n    offsetMinutes: 60,\n    country: 'FR',\n    region: 'Europe',\n    city: 'Paris',\n    isDST: false,\n    utcOffset: 'UTC+1',\n  },\n  {\n    id: 'Asia/Tokyo',\n    name: 'Japan Standard Time',\n    abbreviation: 'JST',\n    offset: '+09:00',\n    offsetMinutes: 540,\n    country: 'JP',\n    region: 'Asia',\n    city: 'Tokyo',\n    isDST: false,\n    utcOffset: 'UTC+9',\n  },\n  {\n    id: 'Asia/Shanghai',\n    name: 'China Standard Time',\n    abbreviation: 'CST',\n    offset: '+08:00',\n    offsetMinutes: 480,\n    country: 'CN',\n    region: 'Asia',\n    city: 'Shanghai',\n    isDST: false,\n    utcOffset: 'UTC+8',\n  },\n  {\n    id: 'Australia/Sydney',\n    name: 'Australian Eastern Time',\n    abbreviation: 'AEST/AEDT',\n    offset: '+10:00',\n    offsetMinutes: 600,\n    country: 'AU',\n    region: 'Australia',\n    city: 'Sydney',\n    isDST: false,\n    utcOffset: 'UTC+10',\n  },\n  {\n    id: 'UTC',\n    name: 'Coordinated Universal Time',\n    abbreviation: 'UTC',\n    offset: '+00:00',\n    offsetMinutes: 0,\n    country: '',\n    region: 'UTC',\n    city: '',\n    isDST: false,\n    utcOffset: 'UTC+0',\n  },\n];\n\nexport async function handleTimezonesEnhanced(request: Request, env: Env): Promise<Response> {\n  const startTime = Date.now();\n  const securityManager = new SecurityManager(env);\n  const cacheManager = new CacheManager(env);\n\n  // Apply security middleware\n  const securityCheck = await securityManager.checkRateLimit(request, RATE_LIMITS.API_GENERAL);\n  if (!securityCheck.allowed) {\n    return new Response(\n      JSON.stringify({\n        error: 'Rate Limit Exceeded',\n        message: 'Too many requests. Please try again later.',\n      }),\n      {\n        status: 429,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n\n  if (request.method !== 'GET') {\n    return new Response(\n      JSON.stringify({\n        error: 'Method Not Allowed',\n        message: 'Only GET method is supported',\n      }),\n      {\n        status: 405,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n\n  try {\n    const url = new URL(request.url);\n    const query = url.searchParams.get('q') || '';\n    const region = url.searchParams.get('region') || '';\n    const country = url.searchParams.get('country') || '';\n    const offset = url.searchParams.get('offset') || '';\n    const limit = parseInt(url.searchParams.get('limit') || '50');\n    const format = url.searchParams.get('format') || 'detailed';\n\n    // Generate cache key\n    const cacheKey = `timezones:${query}:${region}:${country}:${offset}:${limit}:${format}`;\n\n    // Try to get cached result\n    const cachedResult = await cacheManager.get('TIMEZONES', cacheKey);\n    if (cachedResult) {\n      const response = new Response(\n        JSON.stringify({\n          success: true,\n          data: cachedResult,\n          metadata: {\n            timestamp: new Date().toISOString(),\n            processingTime: `${Date.now() - startTime}ms`,\n            cached: true,\n          },\n        }),\n        {\n          headers: { 'Content-Type': 'application/json' },\n        }\n      );\n\n      recordAnalyticsMiddleware(_request, response, _env, startTime);\n      return response;\n    }\n\n    // Filter and search timezones\n    let filteredTimezones = TIMEZONE_DATA;\n\n    // Apply filters\n    if (query) {\n      const searchTerm = query.toLowerCase();\n      filteredTimezones = filteredTimezones.filter(\n        tz =>\n          tz.id.toLowerCase().includes(searchTerm) ||\n          tz.name.toLowerCase().includes(searchTerm) ||\n          tz.city.toLowerCase().includes(searchTerm) ||\n          tz.abbreviation.toLowerCase().includes(searchTerm)\n      );\n    }\n\n    if (region) {\n      filteredTimezones = filteredTimezones.filter(\n        tz => tz.region.toLowerCase() === region.toLowerCase()\n      );\n    }\n\n    if (country) {\n      filteredTimezones = filteredTimezones.filter(\n        tz => tz.country.toLowerCase() === country.toLowerCase()\n      );\n    }\n\n    if (offset) {\n      filteredTimezones = filteredTimezones.filter(\n        tz => tz.offset === offset || tz.utcOffset.toLowerCase().includes(offset.toLowerCase())\n      );\n    }\n\n    // Limit results\n    const limitedTimezones = filteredTimezones.slice(0, Math.min(limit, 100));\n\n    // Format results\n    let result;\n    if (format === 'simple') {\n      result = {\n        timezones: limitedTimezones.map(tz => ({\n          id: tz.id,\n          name: tz.name,\n          offset: tz.offset,\n        })),\n        total: limitedTimezones.length,\n        filtered: filteredTimezones.length,\n      };\n    } else {\n      result = {\n        timezones: limitedTimezones,\n        total: limitedTimezones.length,\n        filtered: filteredTimezones.length,\n        regions: getUniqueRegions(),\n        countries: getUniqueCountries(),\n        offsets: getUniqueOffsets(),\n        search: {\n          query,\n          region,\n          country,\n          offset,\n          limit,\n        },\n      };\n    }\n\n    // Cache the result\n    try {\n      await cacheManager.set('TIMEZONES', cacheKey, result);\n    } catch (error) {\n      console.error('Failed to cache timezones result:', error);\n    }\n\n    const response = new Response(\n      JSON.stringify({\n        success: true,\n        data: result,\n        metadata: {\n          timestamp: new Date().toISOString(),\n          processingTime: `${Date.now() - startTime}ms`,\n          cached: false,\n        },\n      }),\n      {\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n\n    recordAnalyticsMiddleware(_request, response, _env, startTime);\n    return response;\n  } catch (error) {\n    console.error('Timezones API error:', error);\n\n    const response = new Response(\n      JSON.stringify({\n        error: 'Internal Server Error',\n        message: error instanceof Error ? error.message : 'Unknown error',\n      }),\n      {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n\n    recordAnalyticsMiddleware(_request, response, _env, startTime);\n    return response;\n  }\n}\n\nfunction getUniqueRegions(): string[] {\n  return [...new Set(TIMEZONE_DATA.map(tz => tz.region))].filter(Boolean).sort();\n}\n\nfunction getUniqueCountries(): string[] {\n  return [...new Set(TIMEZONE_DATA.map(tz => tz.country))].filter(Boolean).sort();\n}\n\nfunction getUniqueOffsets(): string[] {\n  return [...new Set(TIMEZONE_DATA.map(tz => tz.offset))].sort();\n}\n\n// Helper function to get timezone info by ID\nexport function getTimezoneById(id: string): TimezoneInfo | null {\n  return TIMEZONE_DATA.find(tz => tz.id === id) || null;\n}\n\n// Helper function to convert time between timezones\nexport function convertBetweenTimezones(\n  timestamp: number,\n  fromTimezone: string,\n  toTimezone: string\n): { success: boolean; result?: any; error?: string } {\n  try {\n    const fromTz = getTimezoneById(fromTimezone);\n    const toTz = getTimezoneById(toTimezone);\n\n    if (!fromTz || !toTz) {\n      return { success: false, error: 'Invalid timezone ID' };\n    }\n\n    // Simple conversion (in real implementation, use proper timezone library)\n    const offsetDiff = toTz.offsetMinutes - fromTz.offsetMinutes;\n    const convertedTimestamp = timestamp + offsetDiff * 60;\n\n    return {\n      success: true,\n      result: {\n        originalTimestamp: timestamp,\n        convertedTimestamp,\n        fromTimezone: fromTz,\n        toTimezone: toTz,\n        offsetDifference: offsetDiff,\n        originalDate: new Date(timestamp * 1000).toISOString(),\n        convertedDate: new Date(convertedTimestamp * 1000).toISOString(),\n      },\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error',\n    };\n  }\n}\n", "// Workdays calculation API\n\nimport { recordAnalyticsMiddleware } from './analytics-api';\nimport { CacheManager } from './cache-utils';\nimport { RATE_LIMITS, SecurityManager } from './security';\n\ninterface Env {\n  UPSTASH_REDIS_REST_URL?: string;\n  UPSTASH_REDIS_REST_TOKEN?: string;\n  REDIS_ENABLED?: string;\n}\n\ninterface WorkdaysRequest {\n  startDate: string;\n  endDate?: string;\n  days?: number;\n  excludeWeekends?: boolean;\n  excludeHolidays?: boolean;\n  holidays?: string[];\n  country?: string;\n  includeStartDate?: boolean;\n  includeEndDate?: boolean;\n}\n\ninterface _WorkdaysResponse {\n  success: boolean;\n  data: {\n    startDate: string;\n    endDate: string;\n    totalDays: number;\n    workdays: number;\n    weekends: number;\n    holidays: number;\n    excludedDates: string[];\n    businessDaysOnly: number;\n  };\n  metadata: {\n    timestamp: string;\n    processingTime: string;\n    cached: boolean;\n  };\n}\n\n// Common holidays by country (simplified)\nconst COMMON_HOLIDAYS: Record<string, string[]> = {\n  US: [\n    '2024-01-01',\n    '2024-07-04',\n    '2024-12-25', // New Year, Independence Day, Christmas\n    '2025-01-01',\n    '2025-07-04',\n    '2025-12-25',\n  ],\n  UK: [\n    '2024-01-01',\n    '2024-12-25',\n    '2024-12-26', // New Year, Christmas, Boxing Day\n    '2025-01-01',\n    '2025-12-25',\n    '2025-12-26',\n  ],\n  CN: [\n    '2024-01-01',\n    '2024-02-10',\n    '2024-10-01', // New Year, Spring Festival, National Day\n    '2025-01-01',\n    '2025-01-29',\n    '2025-10-01',\n  ],\n};\n\nexport async function handleWorkdays(request: Request, env: Env): Promise<Response> {\n  const startTime = Date.now();\n  const securityManager = new SecurityManager(env);\n  const cacheManager = new CacheManager(env);\n\n  // Apply security middleware\n  const securityCheck = await securityManager.checkRateLimit(request, RATE_LIMITS.API_GENERAL);\n  if (!securityCheck.allowed) {\n    return new Response(\n      JSON.stringify({\n        error: 'Rate Limit Exceeded',\n        message: 'Too many requests. Please try again later.',\n      }),\n      {\n        status: 429,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n\n  if (request.method !== 'GET' && request.method !== 'POST') {\n    return new Response(\n      JSON.stringify({\n        error: 'Method Not Allowed',\n        message: 'Only GET and POST methods are supported',\n      }),\n      {\n        status: 405,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n  }\n\n  try {\n    let params: WorkdaysRequest;\n\n    if (request.method === 'GET') {\n      const url = new URL(request.url);\n      params = {\n        startDate: url.searchParams.get('startDate') || '',\n        endDate: url.searchParams.get('endDate') || undefined,\n        days: url.searchParams.get('days') ? parseInt(url.searchParams.get('days')!) : undefined,\n        excludeWeekends: url.searchParams.get('excludeWeekends') !== 'false',\n        excludeHolidays: url.searchParams.get('excludeHolidays') === 'true',\n        country: url.searchParams.get('country') || undefined,\n        includeStartDate: url.searchParams.get('includeStartDate') !== 'false',\n        includeEndDate: url.searchParams.get('includeEndDate') !== 'false',\n      };\n    } else {\n      const body = await request.json();\n      params = {\n        excludeWeekends: true,\n        excludeHolidays: false,\n        includeStartDate: true,\n        includeEndDate: true,\n        ...body,\n      };\n    }\n\n    // Validate input\n    const validation = securityManager.validateInput(params, {\n      startDate: { required: true, type: 'string', pattern: /^\\d{4}-\\d{2}-\\d{2}$/ },\n      endDate: { type: 'string', pattern: /^\\d{4}-\\d{2}-\\d{2}$/ },\n      days: { type: 'number', min: 1, max: 3650 }, // Max 10 years\n      country: { type: 'string', maxLength: 2 },\n    });\n\n    if (!validation.valid) {\n      return new Response(\n        JSON.stringify({\n          error: 'Bad Request',\n          message: 'Invalid input parameters',\n          details: validation.errors,\n        }),\n        {\n          status: 400,\n          headers: { 'Content-Type': 'application/json' },\n        }\n      );\n    }\n\n    // Generate cache key\n    const cacheKey = JSON.stringify(params);\n\n    // Try to get cached result\n    const cachedResult = await cacheManager.get('CONVERT_API', cacheKey);\n    if (cachedResult) {\n      const response = new Response(\n        JSON.stringify({\n          success: true,\n          data: cachedResult,\n          metadata: {\n            timestamp: new Date().toISOString(),\n            processingTime: `${Date.now() - startTime}ms`,\n            cached: true,\n          },\n        }),\n        {\n          headers: { 'Content-Type': 'application/json' },\n        }\n      );\n\n      // Record analytics\n      recordAnalyticsMiddleware(request, response, env, startTime);\n      return response;\n    }\n\n    // Calculate workdays\n    const result = calculateWorkdays(params);\n\n    // Cache the result\n    try {\n      await cacheManager.set('CONVERT_API', cacheKey, result);\n    } catch (error) {\n      console.error('Failed to cache workdays result:', error);\n    }\n\n    const response = new Response(\n      JSON.stringify({\n        success: true,\n        data: result,\n        metadata: {\n          timestamp: new Date().toISOString(),\n          processingTime: `${Date.now() - startTime}ms`,\n          cached: false,\n        },\n      }),\n      {\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n\n    // Record analytics\n    recordAnalyticsMiddleware(request, response, env, startTime);\n    return response;\n  } catch (error) {\n    console.error('Workdays API error:', error);\n\n    const response = new Response(\n      JSON.stringify({\n        error: 'Internal Server Error',\n        message: error instanceof Error ? error.message : 'Unknown error',\n      }),\n      {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' },\n      }\n    );\n\n    recordAnalyticsMiddleware(request, response, env, startTime);\n    return response;\n  }\n}\n\nfunction calculateWorkdays(params: WorkdaysRequest): any {\n  const startDate = new Date(params.startDate);\n  let endDate: Date;\n\n  // Determine end date\n  if (params.endDate) {\n    endDate = new Date(params.endDate);\n  } else if (params.days) {\n    endDate = new Date(startDate);\n    endDate.setDate(startDate.getDate() + params.days - 1);\n  } else {\n    throw new Error('Either endDate or days parameter is required');\n  }\n\n  // Validate dates\n  if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {\n    throw new Error('Invalid date format');\n  }\n\n  if (endDate < startDate) {\n    throw new Error('End date must be after start date');\n  }\n\n  // Get holidays\n  const holidays =\n    params.holidays || (params.country ? COMMON_HOLIDAYS[params.country.toUpperCase()] || [] : []);\n  const holidaySet = new Set(holidays);\n\n  // Calculate days\n  let totalDays = 0;\n  let workdays = 0;\n  let weekends = 0;\n  let holidayCount = 0;\n  const excludedDates: string[] = [];\n\n  const currentDate = new Date(startDate);\n\n  while (currentDate <= endDate) {\n    const dateStr = currentDate.toISOString().split('T')[0];\n    const dayOfWeek = currentDate.getDay(); // 0 = Sunday, 6 = Saturday\n\n    totalDays++;\n\n    let isExcluded = false;\n\n    // Check if weekend\n    if (params.excludeWeekends && (dayOfWeek === 0 || dayOfWeek === 6)) {\n      weekends++;\n      isExcluded = true;\n      excludedDates.push(`${dateStr} (weekend)`);\n    }\n\n    // Check if holiday\n    if (params.excludeHolidays && holidaySet.has(dateStr)) {\n      holidayCount++;\n      isExcluded = true;\n      excludedDates.push(`${dateStr} (holiday)`);\n    }\n\n    // Count as workday if not excluded\n    if (!isExcluded) {\n      workdays++;\n    }\n\n    currentDate.setDate(currentDate.getDate() + 1);\n  }\n\n  // Calculate business days (excluding weekends only)\n  let businessDaysOnly = 0;\n  const businessDate = new Date(startDate);\n  while (businessDate <= endDate) {\n    const dayOfWeek = businessDate.getDay();\n    if (dayOfWeek !== 0 && dayOfWeek !== 6) {\n      businessDaysOnly++;\n    }\n    businessDate.setDate(businessDate.getDate() + 1);\n  }\n\n  return {\n    startDate: startDate.toISOString().split('T')[0],\n    endDate: endDate.toISOString().split('T')[0],\n    totalDays,\n    workdays,\n    weekends,\n    holidays: holidayCount,\n    excludedDates,\n    businessDaysOnly,\n  };\n}\n", "// Cloudflare Pages Function - Universal API Handler\n// This single function handles all API routes to avoid function count limits\n\ninterface Env {\n  UPSTASH_REDIS_REST_URL?: string;\n  UPSTASH_REDIS_REST_TOKEN?: string;\n  RATE_LIMITING_ENABLED?: string;\n  CACHING_ENABLED?: string;\n}\n\n// Import core handlers\n\n// Import new API handlers\n\n// Import core handlers\nimport { handleAdminRoutes } from '../../api-handlers/admin-router';\nimport { handleConvert } from '../../api-handlers/convert';\nimport { handleHealth } from '../../api-handlers/health';\nimport { handleNow } from '../../api-handlers/now';\nimport { handleV1Routes } from '../../api-handlers/v1-router';\n\n// Import new API handlers\nimport { handleDateDiff } from '../../api-handlers/date-diff';\nimport { handleFormat } from '../../api-handlers/format';\nimport { handleTimezonesEnhanced } from '../../api-handlers/timezones-enhanced';\nimport { handleWorkdays } from '../../api-handlers/workdays';\n\nexport async function onRequest(context: {\n  request: Request;\n  env: Env;\n  params: { path: string[] };\n}): Promise<Response> {\n  const { request, env, params } = context;\n  const url = new URL(request.url);\n  const hostname = url.hostname;\n  const path = params.path || [];\n\n  // Handle api.tsconv.com subdomain - remove /api prefix from path\n  const isApiSubdomain = hostname === 'api.tsconv.com';\n  const apiPath = isApiSubdomain ? path : path;\n\n  // Add CORS headers\n  const corsHeaders = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n  };\n\n  // Handle preflight requests\n  if (request.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    let response: Response;\n\n    // Route to appropriate handler based on path\n    if (apiPath.length === 0) {\n      // Root API endpoint\n      response = new Response(\n        JSON.stringify({\n          message: 'Timestamp Converter API',\n          version: '1.0.0',\n          domain: hostname,\n          endpoints: isApiSubdomain\n            ? [\n                '/convert',\n                '/now',\n                '/health',\n                '/workdays',\n                '/date-diff',\n                '/format',\n                '/timezones',\n                '/timezone-convert',\n                '/timezone-difference',\n                '/timezone-info',\n                '/batch-convert',\n                '/formats',\n                '/visualization',\n                '/v1/*',\n                '/admin/*',\n              ]\n            : [\n                '/api/convert',\n                '/api/now',\n                '/api/health',\n                '/api/workdays',\n                '/api/date-diff',\n                '/api/format',\n                '/api/timezones',\n                '/api/timezone-convert',\n                '/api/timezone-difference',\n                '/api/timezone-info',\n                '/api/batch-convert',\n                '/api/formats',\n                '/api/visualization',\n                '/api/v1/*',\n                '/api/admin/*',\n              ],\n        }),\n        {\n          headers: { 'Content-Type': 'application/json' },\n        }\n      );\n    } else if (apiPath[0] === 'convert') {\n      response = await handleConvert(request, env);\n    } else if (apiPath[0] === 'now') {\n      response = await handleNow(request, env);\n    } else if (apiPath[0] === 'health') {\n      response = await handleHealth(request, env);\n    } else if (apiPath[0] === 'v1') {\n      response = await handleV1Routes(request, env, apiPath.slice(1));\n    } else if (apiPath[0] === 'admin') {\n      response = await handleAdminRoutes(request, env, apiPath.slice(1));\n    } else if (apiPath[0] === 'workdays') {\n      response = await handleWorkdays(request, env);\n    } else if (apiPath[0] === 'date-diff') {\n      response = await handleDateDiff(request, env);\n    } else if (apiPath[0] === 'format') {\n      response = await handleFormat(request, env);\n    } else if (apiPath[0] === 'timezones') {\n      response = await handleTimezonesEnhanced(request, env);\n    } else {\n      response = new Response(\n        JSON.stringify({\n          error: 'Not Found',\n          message: `API endpoint /${apiPath.join('/')} not found`,\n          domain: hostname,\n          availableEndpoints: isApiSubdomain\n            ? ['/convert', '/now', '/health', '/v1/*', '/admin/*']\n            : ['/api/convert', '/api/now', '/api/health', '/v1/*', '/api/admin/*'],\n        }),\n        {\n          status: 404,\n          headers: { 'Content-Type': 'application/json' },\n        }\n      );\n    }\n\n    // Add CORS headers to response\n    const newHeaders = new Headers(response.headers);\n    Object.entries(corsHeaders).forEach(([key, value]) => {\n      newHeaders.set(key, value);\n    });\n\n    return new Response(response.body, { ...response, headers: newHeaders });\n  } catch (error) {\n    console.error('API Error:', error);\n\n    const errorResponse = new Response(\n      JSON.stringify({\n        error: 'Internal Server Error',\n        message: error instanceof Error ? error.message : 'Unknown error',\n      }),\n      {\n        status: 500,\n        headers: { 'Content-Type': 'application/json', ...corsHeaders },\n      }\n    );\n\n    return errorResponse;\n  }\n}\n", "import { onRequestGet as __api_format_templates_ts_onRequestGet } from \"/Users/donghui/dev/tsconv/functions/api/format/templates.ts\"\nimport { onRequestOptions as __api_format_templates_ts_onRequestOptions } from \"/Users/donghui/dev/tsconv/functions/api/format/templates.ts\"\nimport { onRequestGet as __api_date_diff_ts_onRequestGet } from \"/Users/donghui/dev/tsconv/functions/api/date-diff.ts\"\nimport { onRequestOptions as __api_date_diff_ts_onRequestOptions } from \"/Users/donghui/dev/tsconv/functions/api/date-diff.ts\"\nimport { onRequestGet as __api_format_index_ts_onRequestGet } from \"/Users/donghui/dev/tsconv/functions/api/format/index.ts\"\nimport { onRequestOptions as __api_format_index_ts_onRequestOptions } from \"/Users/donghui/dev/tsconv/functions/api/format/index.ts\"\nimport { onRequestGet as __api_timezones_ts_onRequestGet } from \"/Users/donghui/dev/tsconv/functions/api/timezones.ts\"\nimport { onRequestOptions as __api_timezones_ts_onRequestOptions } from \"/Users/donghui/dev/tsconv/functions/api/timezones.ts\"\nimport { onRequestGet as __api_version_ts_onRequestGet } from \"/Users/donghui/dev/tsconv/functions/api/version.ts\"\nimport { onRequestGet as __api_workdays_ts_onRequestGet } from \"/Users/donghui/dev/tsconv/functions/api/workdays.ts\"\nimport { onRequestOptions as __api_workdays_ts_onRequestOptions } from \"/Users/donghui/dev/tsconv/functions/api/workdays.ts\"\nimport { onRequest as __api___path___ts_onRequest } from \"/Users/donghui/dev/tsconv/functions/api/[[path]].ts\"\n\nexport const routes = [\n    {\n      routePath: \"/api/format/templates\",\n      mountPath: \"/api/format\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_format_templates_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/format/templates\",\n      mountPath: \"/api/format\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_format_templates_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/date-diff\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_date_diff_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/date-diff\",\n      mountPath: \"/api\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_date_diff_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/format\",\n      mountPath: \"/api/format\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_format_index_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/format\",\n      mountPath: \"/api/format\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_format_index_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/timezones\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_timezones_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/timezones\",\n      mountPath: \"/api\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_timezones_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/version\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_version_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/workdays\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_workdays_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/workdays\",\n      mountPath: \"/api\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_workdays_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/:path*\",\n      mountPath: \"/api\",\n      method: \"\",\n      middlewares: [],\n      modules: [__api___path___ts_onRequest],\n    },\n  ]", "/**\n * Tokenizer results.\n */\ninterface LexToken {\n  type:\n    | \"OPEN\"\n    | \"CLOSE\"\n    | \"PATTERN\"\n    | \"NAME\"\n    | \"CHAR\"\n    | \"ESCAPED_CHAR\"\n    | \"MODIFIER\"\n    | \"END\";\n  index: number;\n  value: string;\n}\n\n/**\n * Tokenize input string.\n */\nfunction lexer(str: string): LexToken[] {\n  const tokens: LexToken[] = [];\n  let i = 0;\n\n  while (i < str.length) {\n    const char = str[i];\n\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \":\") {\n      let name = \"\";\n      let j = i + 1;\n\n      while (j < str.length) {\n        const code = str.charCodeAt(j);\n\n        if (\n          // `0-9`\n          (code >= 48 && code <= 57) ||\n          // `A-Z`\n          (code >= 65 && code <= 90) ||\n          // `a-z`\n          (code >= 97 && code <= 122) ||\n          // `_`\n          code === 95\n        ) {\n          name += str[j++];\n          continue;\n        }\n\n        break;\n      }\n\n      if (!name) throw new TypeError(`Missing parameter name at ${i}`);\n\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n\n    if (char === \"(\") {\n      let count = 1;\n      let pattern = \"\";\n      let j = i + 1;\n\n      if (str[j] === \"?\") {\n        throw new TypeError(`Pattern cannot start with \"?\" at ${j}`);\n      }\n\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(`Capturing groups are not allowed at ${j}`);\n          }\n        }\n\n        pattern += str[j++];\n      }\n\n      if (count) throw new TypeError(`Unbalanced pattern at ${i}`);\n      if (!pattern) throw new TypeError(`Missing pattern at ${i}`);\n\n      tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n\n  return tokens;\n}\n\nexport interface ParseOptions {\n  /**\n   * Set the default delimiter for repeat parameters. (default: `'/'`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters to automatically consider prefixes when parsing.\n   */\n  prefixes?: string;\n}\n\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str: string, options: ParseOptions = {}): Token[] {\n  const tokens = lexer(str);\n  const { prefixes = \"./\", delimiter = \"/#?\" } = options;\n  const result: Token[] = [];\n  let key = 0;\n  let i = 0;\n  let path = \"\";\n\n  const tryConsume = (type: LexToken[\"type\"]): string | undefined => {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n  };\n\n  const mustConsume = (type: LexToken[\"type\"]): string => {\n    const value = tryConsume(type);\n    if (value !== undefined) return value;\n    const { type: nextType, index } = tokens[i];\n    throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);\n  };\n\n  const consumeText = (): string => {\n    let result = \"\";\n    let value: string | undefined;\n    while ((value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\"))) {\n      result += value;\n    }\n    return result;\n  };\n\n  const isSafe = (value: string): boolean => {\n    for (const char of delimiter) if (value.indexOf(char) > -1) return true;\n    return false;\n  };\n\n  const safePattern = (prefix: string) => {\n    const prev = result[result.length - 1];\n    const prevText = prefix || (prev && typeof prev === \"string\" ? prev : \"\");\n\n    if (prev && !prevText) {\n      throw new TypeError(\n        `Must have text between two parameters, missing text after \"${(prev as Key).name}\"`,\n      );\n    }\n\n    if (!prevText || isSafe(prevText)) return `[^${escapeString(delimiter)}]+?`;\n    return `(?:(?!${escapeString(prevText)})[^${escapeString(delimiter)}])+?`;\n  };\n\n  while (i < tokens.length) {\n    const char = tryConsume(\"CHAR\");\n    const name = tryConsume(\"NAME\");\n    const pattern = tryConsume(\"PATTERN\");\n\n    if (name || pattern) {\n      let prefix = char || \"\";\n\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: \"\",\n        pattern: pattern || safePattern(prefix),\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    const value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n\n    const open = tryConsume(\"OPEN\");\n    if (open) {\n      const prefix = consumeText();\n      const name = tryConsume(\"NAME\") || \"\";\n      const pattern = tryConsume(\"PATTERN\") || \"\";\n      const suffix = consumeText();\n\n      mustConsume(\"CLOSE\");\n\n      result.push({\n        name: name || (pattern ? key++ : \"\"),\n        pattern: name && !pattern ? safePattern(prefix) : pattern,\n        prefix,\n        suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    mustConsume(\"END\");\n  }\n\n  return result;\n}\n\nexport interface TokensToFunctionOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * Function for encoding input strings for output.\n   */\n  encode?: (value: string, token: Key) => string;\n  /**\n   * When `false` the function can produce an invalid (unmatched) path. (default: `true`)\n   */\n  validate?: boolean;\n}\n\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile<P extends object = object>(\n  str: string,\n  options?: ParseOptions & TokensToFunctionOptions,\n) {\n  return tokensToFunction<P>(parse(str, options), options);\n}\n\nexport type PathFunction<P extends object = object> = (data?: P) => string;\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction<P extends object = object>(\n  tokens: Token[],\n  options: TokensToFunctionOptions = {},\n): PathFunction<P> {\n  const reFlags = flags(options);\n  const { encode = (x: string) => x, validate = true } = options;\n\n  // Compile all the tokens into regexps.\n  const matches = tokens.map((token) => {\n    if (typeof token === \"object\") {\n      return new RegExp(`^(?:${token.pattern})$`, reFlags);\n    }\n  });\n\n  return (data: Record<string, any> | null | undefined) => {\n    let path = \"\";\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n\n      const value = data ? data[token.name] : undefined;\n      const optional = token.modifier === \"?\" || token.modifier === \"*\";\n      const repeat = token.modifier === \"*\" || token.modifier === \"+\";\n\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to not repeat, but got an array`,\n          );\n        }\n\n        if (value.length === 0) {\n          if (optional) continue;\n\n          throw new TypeError(`Expected \"${token.name}\" to not be empty`);\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          const segment = encode(value[j], token);\n\n          if (validate && !(matches[i] as RegExp).test(segment)) {\n            throw new TypeError(\n              `Expected all \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n            );\n          }\n\n          path += token.prefix + segment + token.suffix;\n        }\n\n        continue;\n      }\n\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        const segment = encode(String(value), token);\n\n        if (validate && !(matches[i] as RegExp).test(segment)) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n          );\n        }\n\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n\n      if (optional) continue;\n\n      const typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError(`Expected \"${token.name}\" to be ${typeOfMessage}`);\n    }\n\n    return path;\n  };\n}\n\nexport interface RegexpToFunctionOptions {\n  /**\n   * Function for decoding strings for params.\n   */\n  decode?: (value: string, token: Key) => string;\n}\n\n/**\n * A match result contains data about the path match.\n */\nexport interface MatchResult<P extends object = object> {\n  path: string;\n  index: number;\n  params: P;\n}\n\n/**\n * A match is either `false` (no match) or a match result.\n */\nexport type Match<P extends object = object> = false | MatchResult<P>;\n\n/**\n * The match function takes a string and returns whether it matched the path.\n */\nexport type MatchFunction<P extends object = object> = (\n  path: string,\n) => Match<P>;\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match<P extends object = object>(\n  str: Path,\n  options?: ParseOptions & TokensToRegexpOptions & RegexpToFunctionOptions,\n) {\n  const keys: Key[] = [];\n  const re = pathToRegexp(str, keys, options);\n  return regexpToFunction<P>(re, keys, options);\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction<P extends object = object>(\n  re: RegExp,\n  keys: Key[],\n  options: RegexpToFunctionOptions = {},\n): MatchFunction<P> {\n  const { decode = (x: string) => x } = options;\n\n  return function (pathname: string) {\n    const m = re.exec(pathname);\n    if (!m) return false;\n\n    const { 0: path, index } = m;\n    const params = Object.create(null);\n\n    for (let i = 1; i < m.length; i++) {\n      if (m[i] === undefined) continue;\n\n      const key = keys[i - 1];\n\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map((value) => {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    }\n\n    return { path, index, params };\n  };\n}\n\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str: string) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options?: { sensitive?: boolean }) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\n\n/**\n * Metadata about a key.\n */\nexport interface Key {\n  name: string | number;\n  prefix: string;\n  suffix: string;\n  pattern: string;\n  modifier: string;\n}\n\n/**\n * A token is a string (nothing special) or key metadata (capture group).\n */\nexport type Token = string | Key;\n\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path: RegExp, keys?: Key[]): RegExp {\n  if (!keys) return path;\n\n  const groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n\n  let index = 0;\n  let execResult = groupsRegex.exec(path.source);\n  while (execResult) {\n    keys.push({\n      // Use parenthesized substring match if available, index otherwise\n      name: execResult[1] || index++,\n      prefix: \"\",\n      suffix: \"\",\n      modifier: \"\",\n      pattern: \"\",\n    });\n    execResult = groupsRegex.exec(path.source);\n  }\n\n  return path;\n}\n\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(\n  paths: Array<string | RegExp>,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n): RegExp {\n  const parts = paths.map((path) => pathToRegexp(path, keys, options).source);\n  return new RegExp(`(?:${parts.join(\"|\")})`, flags(options));\n}\n\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(\n  path: string,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n\nexport interface TokensToRegexpOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * When `true` the regexp won't allow an optional trailing delimiter to match. (default: `false`)\n   */\n  strict?: boolean;\n  /**\n   * When `true` the regexp will match to the end of the string. (default: `true`)\n   */\n  end?: boolean;\n  /**\n   * When `true` the regexp will match from the beginning of the string. (default: `true`)\n   */\n  start?: boolean;\n  /**\n   * Sets the final character for non-ending optimistic matches. (default: `/`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters that can also be \"end\" characters.\n   */\n  endsWith?: string;\n  /**\n   * Encode path tokens for use in the `RegExp`.\n   */\n  encode?: (value: string) => string;\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(\n  tokens: Token[],\n  keys?: Key[],\n  options: TokensToRegexpOptions = {},\n) {\n  const {\n    strict = false,\n    start = true,\n    end = true,\n    encode = (x: string) => x,\n    delimiter = \"/#?\",\n    endsWith = \"\",\n  } = options;\n  const endsWithRe = `[${escapeString(endsWith)}]|$`;\n  const delimiterRe = `[${escapeString(delimiter)}]`;\n  let route = start ? \"^\" : \"\";\n\n  // Iterate over the tokens and create our regexp string.\n  for (const token of tokens) {\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      const prefix = escapeString(encode(token.prefix));\n      const suffix = escapeString(encode(token.suffix));\n\n      if (token.pattern) {\n        if (keys) keys.push(token);\n\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            const mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod}`;\n          } else {\n            route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;\n          }\n        } else {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            throw new TypeError(\n              `Can not repeat \"${token.name}\" without a prefix and suffix`,\n            );\n          }\n\n          route += `(${token.pattern})${token.modifier}`;\n        }\n      } else {\n        route += `(?:${prefix}${suffix})${token.modifier}`;\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += `${delimiterRe}?`;\n\n    route += !options.endsWith ? \"$\" : `(?=${endsWithRe})`;\n  } else {\n    const endToken = tokens[tokens.length - 1];\n    const isEndDelimited =\n      typeof endToken === \"string\"\n        ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1\n        : endToken === undefined;\n\n    if (!strict) {\n      route += `(?:${delimiterRe}(?=${endsWithRe}))?`;\n    }\n\n    if (!isEndDelimited) {\n      route += `(?=${delimiterRe}|${endsWithRe})`;\n    }\n  }\n\n  return new RegExp(route, flags(options));\n}\n\n/**\n * Supported `path-to-regexp` input types.\n */\nexport type Path = string | RegExp | Array<string | RegExp>;\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(\n  path: Path,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n", "import { match } from \"path-to-regexp\";\n\n//note: this explicitly does not include the * character, as pages requires this\nconst escapeRegex = /[.+?^${}()|[\\]\\\\]/g;\n\ntype HTTPMethod =\n\t| \"HEAD\"\n\t| \"OPTIONS\"\n\t| \"GET\"\n\t| \"POST\"\n\t| \"PUT\"\n\t| \"PATCH\"\n\t| \"DELETE\";\n\n/* TODO: Grab these from @cloudflare/workers-types instead */\ntype Params<P extends string = string> = Record<P, string | string[]>;\n\ntype EventContext<Env, P extends string, Data> = {\n\trequest: Request;\n\tfunctionPath: string;\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n\tnext: (input?: Request | string, init?: RequestInit) => Promise<Response>;\n\tenv: Env & { ASSETS: { fetch: typeof fetch } };\n\tparams: Params<P>;\n\tdata: Data;\n};\n\ndeclare type PagesFunction<\n\tEnv = unknown,\n\tP extends string = string,\n\tData extends Record<string, unknown> = Record<string, unknown>,\n> = (context: EventContext<Env, P, Data>) => Response | Promise<Response>;\n/* end @cloudflare/workers-types */\n\ntype RouteHandler = {\n\troutePath: string;\n\tmountPath: string;\n\tmethod?: HTTPMethod;\n\tmodules: PagesFunction[];\n\tmiddlewares: PagesFunction[];\n};\n\n// inject `routes` via ESBuild\ndeclare const routes: RouteHandler[];\n// define `__FALLBACK_SERVICE__` via ESBuild\ndeclare const __FALLBACK_SERVICE__: string;\n\n// expect an ASSETS fetcher binding pointing to the asset-server stage\ntype FetchEnv = {\n\t[name: string]: { fetch: typeof fetch };\n\tASSETS: { fetch: typeof fetch };\n};\n\ntype WorkerContext = {\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n};\n\nfunction* executeRequest(request: Request) {\n\tconst requestPath = new URL(request.url).pathname;\n\n\t// First, iterate through the routes (backwards) and execute \"middlewares\" on partial route matches\n\tfor (const route of [...routes].reverse()) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// replaces with \"\\\\$&\", this prepends a backslash to the matched string, e.g. \"[\" becomes \"\\[\"\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult) {\n\t\t\tfor (const handler of route.middlewares.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: mountMatchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\t// Then look for the first exact route match and execute its \"modules\"\n\tfor (const route of routes) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: true,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult && route.modules.length) {\n\t\t\tfor (const handler of route.modules.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: matchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport default {\n\tasync fetch(\n\t\toriginalRequest: Request,\n\t\tenv: FetchEnv,\n\t\tworkerContext: WorkerContext\n\t) {\n\t\tlet request = originalRequest;\n\t\tconst handlerIterator = executeRequest(request);\n\t\tlet data = {}; // arbitrary data the user can set between functions\n\t\tlet isFailOpen = false;\n\n\t\tconst next = async (input?: RequestInfo, init?: RequestInit) => {\n\t\t\tif (input !== undefined) {\n\t\t\t\tlet url = input;\n\t\t\t\tif (typeof input === \"string\") {\n\t\t\t\t\turl = new URL(input, request.url).toString();\n\t\t\t\t}\n\t\t\t\trequest = new Request(url, init);\n\t\t\t}\n\n\t\t\tconst result = handlerIterator.next();\n\t\t\t// Note we can't use `!result.done` because this doesn't narrow to the correct type\n\t\t\tif (result.done === false) {\n\t\t\t\tconst { handler, params, path } = result.value;\n\t\t\t\tconst context = {\n\t\t\t\t\trequest: new Request(request.clone()),\n\t\t\t\t\tfunctionPath: path,\n\t\t\t\t\tnext,\n\t\t\t\t\tparams,\n\t\t\t\t\tget data() {\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t},\n\t\t\t\t\tset data(value) {\n\t\t\t\t\t\tif (typeof value !== \"object\" || value === null) {\n\t\t\t\t\t\t\tthrow new Error(\"context.data must be an object\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// user has overriden context.data, so we need to merge it with the existing data\n\t\t\t\t\t\tdata = value;\n\t\t\t\t\t},\n\t\t\t\t\tenv,\n\t\t\t\t\twaitUntil: workerContext.waitUntil.bind(workerContext),\n\t\t\t\t\tpassThroughOnException: () => {\n\t\t\t\t\t\tisFailOpen = true;\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tconst response = await handler(context);\n\n\t\t\t\tif (!(response instanceof Response)) {\n\t\t\t\t\tthrow new Error(\"Your Pages function should return a Response\");\n\t\t\t\t}\n\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else if (__FALLBACK_SERVICE__) {\n\t\t\t\t// There are no more handlers so finish with the fallback service (`env.ASSETS.fetch` in Pages' case)\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else {\n\t\t\t\t// There was not fallback service so actually make the request to the origin.\n\t\t\t\tconst response = await fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\treturn await next();\n\t\t} catch (error) {\n\t\t\tif (isFailOpen) {\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\t},\n};\n\n// This makes a Response mutable\nconst cloneResponse = (response: Response) =>\n\t// https://fetch.spec.whatwg.org/#null-body-status\n\tnew Response(\n\t\t[101, 204, 205, 304].includes(response.status) ? null : response.body,\n\t\tresponse\n\t);\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/donghui/dev/tsconv/node_modules/wrangler/templates/pages-template-worker.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/donghui/dev/tsconv/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/donghui/dev/tsconv/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/donghui/dev/tsconv/node_modules/wrangler/templates/pages-template-worker.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/donghui/dev/tsconv/.wrangler/tmp/bundle-ldGqPE/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/donghui/dev/tsconv/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/donghui/dev/tsconv/.wrangler/tmp/bundle-ldGqPE/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/donghui/dev/tsconv/.wrangler/tmp/bundle-ldGqPE/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/donghui/dev/tsconv/.wrangler/tmp/pages-IqqQDz/functionsWorker-0.945890114993989.mjs\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/donghui/dev/tsconv/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/donghui/dev/tsconv/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/donghui/dev/tsconv/.wrangler/tmp/pages-IqqQDz/functionsWorker-0.945890114993989.mjs\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/donghui/dev/tsconv/.wrangler/tmp/bundle-ZnJwIg/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/donghui/dev/tsconv/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/donghui/dev/tsconv/.wrangler/tmp/bundle-ZnJwIg/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/donghui/dev/tsconv/.wrangler/tmp/bundle-ZnJwIg/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["urls", "checkURL", "__name", "onRequestOptions", "onRequestGet", "date", "FORMAT_TEMPLATES", "_env", "_date", "_timezone", "_request", "response", "calculateDateDifference", "formatDate", "monthNames", "monthNamesShort", "dayNames", "dayNamesShort", "getOrdinalSuffix", "day", "TIMEZONE_DATA", "calculateWorkdays", "value", "_a", "result", "char", "prefix", "i", "drainBody", "middleware_ensure_req_body_drained_default", "reduceError", "jsonError", "middleware_miniflare3_json_error_default", "__INTERNAL_WRANGLER_MIDDLEWARE__", "middleware_ensure_req_body_drained_default", "middleware_miniflare3_json_error_default", "middleware_insertion_facade_default", "__facade_middleware__", "__facade_register__", "__facade_invokeChain__", "__facade_invoke__", "__facade_middleware__", "__Facade_ScheduledController__", "___Facade_ScheduledController__", "wrapExportedHandler", "__INTERNAL_WRANGLER_MIDDLEWARE__", "__facade_register__", "__facade_invoke__", "wrapWorkerEntrypoint", "WRAPPED_ENTRY", "middleware_insertion_facade_default", "middleware_loader_entry_default"]
}
